{"operations":[{"specification":"This API operation handles user registration (join) for the member role. It creates a new user account in the todo_list_members table using the provided email and password_hash. The operation sets the created_at timestamp to the current time and initializes the user with no associated role until the role assignment is processed. This is a public endpoint that allows new members to register. The schema confirms the existence of email, password_hash, and created_at fields necessary for this operation.","authorizationType":"join","description":"This API operation creates a new member account in the todo_list_members table. When a user registers, they provide an email address and password which are securely stored.\n\nThe schema confirms this operation is supported by the existence of 'email' and 'password_hash' fields in the todo_list_members table, which store the user's login credentials. The 'created_at' field is automatically populated with the current timestamp in Asia/Seoul timezone.\n\nThe system enforces unique email addresses to prevent duplicate account creation. The password_hash is stored using bcrypt algorithm with cost factor 12 as specified in the schema description. No other fields are required for registration.\n\nThe registration flow is the first step in the authentication process for members. After successful registration, the system will need to create a corresponding todo_list_member_roles record to assign the 'member' role.\n\nIt's critical that email addresses are validated to ensure they follow RFC 5322 format, and passwords meet the minimum security requirements as defined in the schema.","summary":"Register a new member user account with email and password hash in todo_list_members table.","parameters":[],"requestBody":{"description":"Contains the email and password hash needed to create a new member account.","typeName":"ITodoListMember.IJoin"},"responseBody":{"description":"Returns the authentication token and user information after successful registration.","typeName":"ITodoListMember.IAuthorized"},"authorizationRole":"member","name":"join","path":"/auth/member/join","method":"post"},{"specification":"This API operation authenticates members by validating their email and password against the todo_list_members table. Upon successful validation, it issues a JWT token. This endpoint implements the login function for member users by comparing the provided credentials with stored password hashes. The schema confirms the existence of email and password_hash fields necessary for authentication.","authorizationType":"login","description":"This API operation authenticates member users by validating their credentials against the todo_list_members table. When a user attempts to log in, the system checks if an email exists in the database and if the provided password_hash matches the stored value using bcrypt algorithm.\n\nThe schema confirms this operation is supported by the 'email' and 'password_hash' fields in the todo_list_members table, which store user credentials. The 'created_at' and 'updated_at' fields are used for session management and inactivity timeout logic.\n\nThe system implements security best practices by not disclosing whether an email exists in the system when authentication fails. It implements a 30-minute session timeout as specified in the business requirements, where the issued JWT token expires after 30 minutes.\n\nThis operation is essential for member users to access their todo items. After successful authentication, the user receives a JWT token containing their userId and role information (member). The token must be included in subsequent requests to authorize access to private resources.\n\nThe authentication process follows the security compliance requirements: no password data is transmitted in plain text, and all communication uses HTTPS/TLS 1.2+.","summary":"Authenticate member user and issue JWT access token using email and password hash from todo_list_members table.","parameters":[],"requestBody":{"description":"Contains the email address and password hash for authenticating a member user.","typeName":"ITodoListMember.ILogin"},"responseBody":{"description":"Returns the authentication token and user information after successful login.","typeName":"ITodoListMember.IAuthorized"},"authorizationRole":"member","name":"login","path":"/auth/member/login","method":"post"},{"specification":"This API operation refreshes the authentication token for member users. The operation validates a refresh token and issues a new JWT access token with updated expiration. The schema confirms the existence of the necessary user identity fields which are referenced during token refresh.","authorizationType":"refresh","description":"This API operation refreshes the authentication token for member users by validating a refresh token and issuing a new JWT access token. The refresh token is a separate long-lived credential that is issued during the login process, and its purpose is to allow the user to obtain a new access token without re-entering their credentials.\n\nAlthough the todo_list_members schema does not explicitly store refresh tokens, the refresh operation is implemented as part of the authentication workflow following industry standards. The refresh mechanism operates by validating the refresh token's signature and issuer, then issuing a new access token.\n\nThe system follows the session management requirements, including a 30-minute session timeout. When a user's JWT access token expires, they must use this refresh endpoint to obtain a new token before attempting further operations on their todo items.\n\nThe operation ensures the user's identity is consistent between the old, expired token and the new token by using the user's UUID from the refresh token. The refresh operation is secured, and the refresh token must be stored securely on the client side.\n\nThis endpoint does not require the user's password and is designed to minimize user friction while maintaining security.","summary":"Refresh JWT access token for member user using a valid refresh token.","parameters":[],"requestBody":{"description":"Contains the refresh token to obtain a new access token.","typeName":"ITodoListMember.IRefresh"},"responseBody":{"description":"Returns a new JWT access token and user information after successful refresh.","typeName":"ITodoListMember.IAuthorized"},"authorizationRole":"member","name":"refresh","path":"/auth/member/refresh","method":"post"},{"specification":"This API operation allows members to update their password. It validates the current password (from todo_list_members table) and replaces it with a new password hash. The operation ensures security by requiring the old password and only updating the password_hash field in the database.","authorizationType":null,"description":"This API operation enables member users to change their authentication password. The operation requires the user to provide their current password (which is validated against the password_hash in the todo_list_members table) and a new password.\n\nThe schema confirms this operation is supported by the 'password_hash' field in the todo_list_members table, which stores the bcrypt-hashed password. The operation uses the existing password_hash for validation and replaces it with a new one when the current password is verified.\n\nThe system implements the security requirements by: hashing the new password with bcrypt algorithm (cost factor 12), ensuring the new password meets minimum requirements (at least 8 characters), and encrypting all communications with HTTPS/TLS 1.2+.\n\nThis operation is protected by the member authorization role, meaning only authenticated users can change their password. The update also modifies the 'updated_at' timestamp in the todo_list_members table, which helps track security events and informs session management logic (inactivity timeout).\n\nThe operation prevents unauthorized password changes by requiring knowledge of the current password, following the principle of least privilege.","summary":"Update member user's password in todo_list_members table after validating current password.","parameters":[],"requestBody":{"description":"Contains current password and new password for updating member user's credentials.","typeName":"ITodoListMember.IUpdatePassword"},"responseBody":{"description":"Confirms successful password update and returns updated user data.","typeName":"ITodoListMember"},"authorizationRole":"member","name":"updatePassword","path":"/auth/member/password/update","method":"put"},{"specification":"This API operation initiates the password reset process for member users. It does not immediately change the password but generates a reset token and sends it to the user's email. The schema confirms the existence of the email field necessary for this operation.","authorizationType":null,"description":"This API operation initiates the password reset process for member users by generating a time-limited reset token and bound to the user's email address. The token is stored securely and associated with the user's account in the todo_list_members table.\n\nThe schema confirms this operation is supported by the 'email' field in the todo_list_members table, which is used to identify the user requesting the password reset. The operation requires a valid, registered email address to prevent abuse.\n\nThe system implements the security requirements by: using a cryptographically secure random token, binding it to a specific email for 15 minutes, and preventing multiple concurrent reset requests. No password is changed during this operation; it only initiates a reset workflow.\n\nAfter initiating, the user will receive the token via email (handled by an external system not defined in this schema), and will then use the resetToken in a follow-up operation to actually update their password. The operation does not directly modify the password_hash field during reset initiation, maintaining data integrity.\n\nThe operation supports the business requirement of allowing members to recover access if they forget their password while preventing brute force attacks and email enumeration attacks.","summary":"Initiate password reset for member user by generating reset token associated with email in todo_list_members table.","parameters":[],"requestBody":{"description":"Contains the email address for which a password reset is requested.","typeName":"ITodoListMember.IRequestPasswordReset"},"responseBody":{"description":"Confirms successful initiation of password reset process.","typeName":"ITodoListMember.IResetInitiated"},"authorizationRole":"member","name":"requestPasswordReset","path":"/auth/member/password/reset/request","method":"post"},{"specification":"This API operation completes the password reset process for member users. It validates the reset token and updates the password_hash field in the todo_list_members table with a new password hash. This finalizes the password reset workflow.","authorizationType":null,"description":"This API operation completes the password reset process for member users by validating a previously issued reset token and updating the password_hash field in the todo_list_members table with a new password hash.\n\nThe schema confirms this operation is supported by the 'password_hash' and 'email' fields in the todo_list_members table. The 'email' field identifies the user account, and the 'password_hash' field is updated with the new bcrypt-hashed password.\n\nThe operation first validates that the reset token is: 1) valid and unexpired; 2) associated with a registered email address; and 3) hasn't been used before. Only after these validations pass is the password_hash updated.\n\nThe system implements security requirements by: using cryptographically secure tokens with 15-minute expirations, enforcing new password requirements (minimum 8 characters), and hashing the new password with bcrypt (cost factor 12). The operation also updates the 'updated_at' timestamp to record the security event.\n\nThis is the final step in the password reset workflow, following the requestPasswordReset operation. After successful completion, the user must log in with their new credentials.","summary":"Complete password reset for member user by validating reset token and updating password_hash in todo_list_members table.","parameters":[],"requestBody":{"description":"Contains the reset token and new password to complete password reset process.","typeName":"ITodoListMember.ICompletePasswordReset"},"responseBody":{"description":"Confirms successful password reset and returns updated authentication token.","typeName":"ITodoListMember.IAuthorized"},"authorizationRole":"member","name":"completePasswordReset","path":"/auth/member/password/reset/complete","method":"put"},{"specification":"This operation retrieves a paginated list of todo items belonging to the authenticated user with advanced filtering, searching, and sorting capabilities. It operates on the todo_list_todos table from the Prisma schema and supports complex queries to find todos based on status, title search, and creation date ranges. All results are filtered to only include items owned by the authenticated user, ensuring strict data ownership. Search functionality includes partial title matching using trigram operations for efficient text searching.","path":"/todoList/member/todos","method":"patch","summary":"Search and retrieve a filtered, paginated list of todo items for the authenticated user","description":"Retrieve a filtered and paginated list of todo items belonging to the authenticated user. This operation enables users to search through their personal task list using multiple criteria including status filtering, partial title matching, and date range queries. The system ensures strict data ownership by automatically filtering results to include only todo items associated with the authenticated user's ID.\n\nThe operation supports partial text matching on titles using PostgreSQL trigram operations for efficient fuzzy searching. Users can search for tasks containing specific phrases, and the results are returned in order of relevance. Status filtering allows users to view only active tasks, only completed tasks, or all tasks. Results are sorted by creation date in descending order (newest first) by default.\n\nThis operation fully supports pagination with configurable page sizes and cursor-based navigation. Each response includes metadata about total count and pagination state, allowing clients to implement infinite scrolling or page navigation interfaces.\n\nSecurity considerations include rate limiting for search operations and immediate rejection of requests attempting to access todo items not owned by the authenticated user. The implementation enforces row-level security at the database level, ensuring that users cannot access or even determine the existence of todo items belonging to other users.\n\nThis operation integrates with the todo_list_todos table as defined in the Prisma schema, incorporating all available todo fields and relationships. The response includes comprehensive todo information optimized for list displays, with no unnecessary data transfer.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for todo item filtering","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of todo items matching search criteria","typeName":"IPageITodoListTodo"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member","authorizationType":null},{"specification":"This operation retrieves a single todo item by its unique identifier for the authenticated user. It operates on the todo_list_todos table from the Prisma schema and returns comprehensive details about a specific task. The system enforces strict data ownership by validating that the requested todo item belongs to the authenticated user before returning any data.","path":"/todoList/member/todos/{todoId}","method":"get","summary":"Retrieve a specific todo item by its unique identifier","description":"Retrieve a specific todo item by its unique identifier (UUID). This operation returns complete details about a single task owned by the authenticated user, including the title, status, creation timestamp, and last updated timestamp.\n\nThe system maintains strict data ownership by validating that the todo item's todo_list_member_id matches the authenticated user's ID before returning any data. If the todo item exists but belongs to a different user, the system returns a 404 Not Found response without disclosing the existence of items owned by other users, implementing a security-by-obscurity principle.\n\nThe returned todo item includes all fields as defined in the todo_list_todos Prisma schema: id, title, status, created_at, and updated_at. The status field will be either 'active' or 'completed' as specified in the business rules, and the timestamps are stored in Timestamptz format representing Asia/Seoul timezone.\n\nThis operation is typically used when a user needs to view detailed information about a specific task, such as when navigating to a task detail page from a list view. It supports high-performance database indexing on the combination of todo_list_member_id and id to ensure sub-millisecond response times even with large datasets.\n\nNo request body is required as all information is provided through the path parameter. The operation conforms strictly to the business rules that define todo item properties and ensures that users can only access their own data.","parameters":[{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of the requested todo item","typeName":"ITodoListTodo"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member","authorizationType":null},{"specification":"This operation creates a new todo item for the authenticated user. It operates on the todo_list_todos table from the Prisma schema and requires a title field with validation against business rules. The system automatically assigns the authenticated user as the owner and sets default values for status and timestamps according to business requirements.","path":"/todoList/member/todos","method":"post","summary":"Create a new todo item for the authenticated user","description":"Create a new todo item for the authenticated user with a specified title. This operation follows the business rules that require todo item titles to be between 1 and 255 characters and not empty or whitespace-only. The system enforces these validation rules at the API level before creating any database records.\n\nWhen a valid title is provided, the system creates a new record in the todo_list_todos table with the following automatic assignments:\n- The todo_list_member_id is set to the authenticated user's ID\n- The status is set to 'active' by default\n- The created_at timestamp is set to the current time in Asia/Seoul timezone\n- The updated_at timestamp is set to the same value as created_at\n- A unique UUID is generated for the id field\n\nIf the title violates the business rules (empty, whitespace-only, or exceeds 255 characters), the system rejects the request with an appropriate error response without creating any database record, ensuring data integrity.\n\nThe system follows the security principle of data ownership, automatically associating the new todo item with the authenticated user and preventing any association with other users. This implementation allows for independent task management without any collaboration features as specified in the requirements.\n\nThe operation returns the complete created todo item including all fields, confirming successful creation to the client. The response includes the generated UUID, title, status, and timestamps, enabling the client to immediately display the new task in the user interface.","parameters":[],"requestBody":{"description":"Creation data for a new todo item","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"The newly created todo item with assigned system values","typeName":"ITodoListTodo"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null},{"specification":"This operation updates the title or status of a specific todo item owned by the authenticated member. It validates that the todo item belongs to the authenticated user and enforces business rules: titles must be 1-255 non-whitespace characters, and status can only be toggled between 'active' and 'completed'. Updating a completed item's title is prohibited. This operation modifies the updated_at timestamp but preserves the original created_at timestamp.","path":"/todoList/member/todos/{todoId}","method":"put","summary":"Update a todo item's title or status","description":"This operation allows an authenticated member to modify the title or status of their specific todo item. The operation validates ownership by ensuring the todo item's todo_list_member_id matches the authenticated user's ID. If the status is being changed, it must toggle between 'active' and 'completed'; any other status value is rejected. If the title is being updated, it must be between 1 and 255 non-whitespace characters, and editing is only permitted if the item's status is 'active'. Completed items cannot have their titles edited. Upon successful update, the updated_at timestamp is set to the current date and time in the user's timezone (Asia/Seoul), while the created_at timestamp remains unchanged.\n\nSecurity is enforced through strict ownership validation: if the requested todo item does not belong to the authenticated user, the request is rejected with a 403 Forbidden response. The operation does not support partial updates; the request must include at least one of the fields to update (title or status). If neither is provided, the request is invalid.\n\nThis operation is essential for personal task management, enabling users to refine their tasks' details or mark completion. It preserves data integrity by preventing editing of completed tasks and ensures users can only modify their own data in compliance with the system's single-user ownership model.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the todo item: title (1-255 chars, non-empty) or status ('active' or 'completed')","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"The updated todo item with modified title or status and updated_at timestamp","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation permanently deletes all todo items owned by the authenticated member. It performs a hard delete with no possibility of recovery, in accordance with the system's design where data ownership is absolute and deletion is final. The operation does not accept a request body; deletion is triggered by the endpoint and applies to all todos belonging to the authenticated user. After this operation, no trace of the deleted items remains in the system.","path":"/todoList/member/todos","method":"delete","summary":"Permanently delete all todo items for the authenticated member","description":"This operation permanently removes every todo item owned by the authenticated member. Unlike individual item deletion, this is a bulk deletion operation that removes all records from the todo_list_todos table that are linked to the authenticated user's ID. As the Prisma schema does not include any soft delete fields (like deleted_at) on the todo_list_todos model, this is a hard delete - the data is completely and irreversibly removed from the database. There is no recovery mechanism, and no archives are maintained.\n\nThe operation does not require a request body. It is triggered by the endpoint and applies exclusively to the authenticated user's data, as all todo items in the database are linked to a member via the todo_list_member_id foreign key. The system automatically enforces ownership by only allowing deletion of items belonging to the user associated with the authentication token.\n\nThis endpoint supports the business rule that users can permanently clear their completed tasks, and extends it to allow clearing all tasks (both active and completed) in a single action. It is used for data clean-up when a user wishes to start over. Given the system's design of single-user, personal task management with no collaboration features, no cascading deletions or orphaned references exist.\n\nThis delete operation is therefore both simple and absolute -- when executed, it removes every todo item the user has ever created, in compliance with the requirement that data must be stored solely on the user's device and not preserved in any external or recovery-enabled form.","parameters":[],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"}],"components":{"authorization":[{"name":"member","description":"An authenticated user who can create, view, update, and delete their own todo items. This is the only user role in this system, representing the personal user of the application.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTodo":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the member account.\n\nThis UUID is generated by the system and serves as the primary reference for all operations involving this member.\n\nThe ID is immutable and persists for the lifetime of the account, used to establish relationships with todo_list_member_roles and todo_list_todos tables.\n\nAll operations enforce data ownership by matching this id with the authenticated user's ID from the JWT token."},"email":{"type":"string","format":"email","description":"User's email address used for authentication. Must be unique across the system.\n\nThis field stores the email address that members use to log in to the application.\n\nThe system enforces uniqueness at the database level to prevent duplicate accounts.\n\nEmail addresses must follow RFC 5322 format for standard email validation.\n\nThis field is required for authentication and is never displayed to other users for privacy reasons.\n\nThe system implements security best practices by never revealing in error messages whether a provided email exists in the system."},"password_hash":{"type":"string","description":"Hashed password using bcrypt algorithm with cost factor 12. Never stores plain text passwords.\n\nThis field stores the result of securely hashing the member's password using the bcrypt algorithm with a cost factor of 12.\n\nThe system never stores, transmits, or logs plain text passwords.\n\nWhen a member registers or updates their password, the system hashes the provided password with a unique salt and stores only the resulting hash.\n\nDuring authentication, the system hashes the provided password with the same salt and compares the result against this stored hash.\n\nThe bcrypt implementation ensures resistance to brute force attacks and rainbow table attacks."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this user account was created.\n\nRecords the exact date and time (in Asia/Seoul timezone) when the member account was created in the system.\n\nThis timestamp is set once at account creation and never modified.\n\nThe value is stored in Timestamptz format in the database and is always converted to UTC for internal processing, then displayed in Asia/Seoul timezone to the user.\n\nThis field is used for account age analysis and lifecycle management.\n\nIt is indexed to optimize query performance for account-related operations."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this user account was last updated.\n\nRecords the date and time of the most recent modification to the member account.\n\nThis timestamp is automatically updated whenever the member's email or password_hash is changed.\n\nIt helps track security events and informs session management logic (inactivity timeout).\n\nThe timestamp is stored in Timestamptz format in the database and represents Asia/Seoul timezone in display contexts.\n\nIt is indexed to optimize query performance for account-related operations."},"deleted_at":{"type":"string","format":"date-time","description":"Soft delete timestamp. If null, account is active; if set, account is logically deleted.\n\nThis field implements soft deletion for member accounts, allowing for account recovery if needed.\n\nWhen an account is deleted, this field is set to the current date and time, effectively hiding the account from regular queries.\n\nThe account can still be recovered by nulling this field before the account is permanently purged from the system.\n\nDuring authentication, the system checks this field and rejects login attempts for accounts where deleted_at is not null.\n\nThis field is indexed to optimize soft deletion queries."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Stores authentication credentials and identity information for todo list users. Each member has a unique email and hashed password for secure login.\n\nThis model represents the primary user entity in the system with a single role (\"member\").\n\nThe system uses this model to authenticate users and establish data ownership for todo items.\n\nAll member accounts must have a unique email and a securely hashed password.\n\nThe created_at and updated_at timestamps enable lifecycle tracking of accounts.\n\nThe deleted_at field implements soft deletion, allowing for account recovery before permanent removal.\n\nThis entity is the foundation for all authentication, authorization, and user data ownership in the system."},"ITodoListMember.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address used for authentication. Must be unique across the system.\n\nThis field stores the email address that members use to register for the application.\n\nThe system enforces uniqueness at the database level to prevent duplicate accounts.\n\nEmail addresses must follow RFC 5322 format for standard email validation.\n\nWhen a user registers, the system validates this email and creates a new account with this address."},"password_hash":{"type":"string","description":"Hashed password using bcrypt algorithm with cost factor 12. Never stores plain text passwords.\n\nThis field stores the result of securely hashing the member's password using the bcrypt algorithm with a cost factor of 12.\n\nThe system never stores, transmits, or logs plain text passwords.\n\nDuring registration, the system hashes the provided password with a unique salt and stores only the resulting hash.\n\nThe bcrypt implementation ensures resistance to brute force attacks and rainbow table attacks.\n\nThe password must meet minimum security requirements (at least 8 characters) before hashing."}},"required":["email","password_hash"],"description":"Request body for user registration (join) operation.\n\nThis type represents the information required to create a new member account.\n\nThe system requires only the email address and password hash for registration.\n\nThe password_hash is already hashed using bcrypt algorithm with cost factor 12 before being sent to the server.\n\nThe system validates the email format and ensures the email is not already registered.\n\nAll other fields (id, created_at, updated_at, deleted_at) are auto-generated by the system and must not be provided by the client.\n\nThis request type implements the join operation for new users to create an account in the todo_list_members table."},"ITodoListMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member.\n\nThis UUID is extracted from the JWT token and identifies the member account.\n\nThe system matches this ID with the todo_list_members table to establish data ownership for all subsequent operations.\n\nThe ID is immutable and persists for the lifetime of the account.\n\nThis field is required in all authorization responses to identify the authenticated user and enable proper data filtering."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as login, join, or token refresh.\n\nThe response format follows the standardized I{RoleName}.IAuthorized pattern for authentication responses.\n\nThe id field contains the authenticated member's unique identifier.\n\nThe token field contains the JWT authentication token referencing the IAuthorizationToken type.\n\nThis structure enables complete JWT token lifecycle management with proper expiration and refresh mechanisms.\n\nNo other user data is included in this response to minimize exposure and follow the principle of least privilege."},"ITodoListMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address used for authentication. Must be unique across the system.\n\nThis field stores the email address that members use to log in to the application.\n\nThe system uses this field to locate the account in the todo_list_members table.\n\nEmail addresses must follow RFC 5322 format for standard email validation.\n\nThe system implements security best practices by never revealing in error messages whether a provided email exists in the system."},"password_hash":{"type":"string","description":"Hashed password using bcrypt algorithm with cost factor 12. Never stores plain text passwords.\n\nThis field stores the result of securely hashing the member's password using the bcrypt algorithm with a cost factor 12.\n\nThe system never stores, transmits, or logs plain text passwords.\n\nDuring login, the system hashes the provided password with the same salt as stored in the database and compares the result against the stored hash.\n\nThe bcrypt implementation ensures resistance to brute force attacks and rainbow table attacks.\n\nThe password_mask field is not used because passwords are not sent as plain text."}},"required":["email","password_hash"],"description":"Request body for member user authentication (login) operation.\n\nThis type represents the authentication credentials required to log in to the system.\n\nThe system requires only the email address and password hash for authentication.\n\nThe password_hash is already hashed using bcrypt algorithm with cost factor 12 before being sent to the server.\n\nThe system validates the credentials against the todo_list_members table.\n\nIf the email exists but the password hash doesn't match, the system returns a generic \"Invalid email or password\" error without revealing which one is incorrect.\n\nAll other fields (id, created_at, updated_at, deleted_at) are managed by the system and must not be provided by the client.\n\nThis request type implements the login operation for existing users to obtain a JWT access token."},"ITodoListMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Long-lived refresh token used to obtain a new JWT access token.\n\nThis token is issued during the login process and has a longer expiration time (typically 7 days) than the access token (30 minutes).\n\nThe refresh token is stored securely on the client side and sent with each refresh request.\n\nThe system validates the refresh token's signature, issuer, and expiration before issuing a new access token.\n\nRefresh tokens are single-use - after being used to obtain a new access token, the old refresh token is invalidated and a new one is issued.\n\nThis mechanism allows users to maintain authentication without re-entering credentials while still providing a way to revoke access through token invalidation."}},"required":["refresh_token"],"description":"Request body for authentication token refresh operation.\n\nThis type represents the refresh token needed to obtain a new JWT access token after the current one expires.\n\nThe refresh token is a long-lived credential that is issued during the initial login process.\n\nThe system validates the refresh token's signature, issuer, and expiration before issuing a new access token.\n\nThe refresh token is single-use - after being used to obtain a new access token, it is invalidated and a new refresh token is issued.\n\nThis mechanism allows users to remain authenticated without re-entering credentials frequently while maintaining security through token rotation.\n\nThe refresh operation does not require the user's password or email, minimizing exposure of sensitive credentials."},"ITodoListTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the todo item.\n\nThis UUID is generated by the system upon creation and is used as the primary reference for all operations involving this todo item.\n\nThe ID is immutable and persists for the lifetime of the todo item, even if other properties like title or status are changed.\n\nThis field is critical for establishing data ownership, as each todo item is linked to a member via the todo_list_member_id foreign key in the todo_list_members table.\n\nAll CRUD operations on todo items require this id as a path parameter to identify the exact item being modified."},"todo_list_member_id":{"type":"string","format":"uuid","description":"Owner of this todo item. {@link todo_list_members.id}.\n\nThis field establishes the data ownership relationship between the todo item and the member account.\n\nIt is a foreign key that references the id field in the todo_list_members table.\n\nEvery todo item must belong to exactly one member, and the system enforces that only the authenticated member can access or modify their own todo items.\n\nThis field is automatically populated by the system during creation using the authenticated user's ID, ensuring strict data ownership.\n\nAny attempt to create or update a todo item with a todo_list_member_id that does not match the authenticated user's ID results in a 403 Forbidden response."},"title":{"type":"string","minLength":1,"maxLength":255,"description":"The task title. Must be 1-255 characters, non-empty, non-whitespace only.\n\nPreserves internal whitespace but trims leading/trailing spaces.\n\nThis field represents the primary content of the todo item, the user's task description.\n\nThe system enforces the business rule that the title must be between 1 and 255 characters and cannot be empty or consist solely of whitespace.\n\nWhen a user submits a title with leading/trailing whitespace, the system trims it before storage, but preserves all internal whitespace.\n\nThis field is indexed for full-text search using PostgreSQL trigram operations (gin_trgm_ops) to enable real-time partial matching.\n\nThe title is the only editable field for active todos; once status is set to 'completed', the title is frozen and cannot be modified."},"status":{"oneOf":[{"const":"active","description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThe system updates the updated_at timestamp whenever this field is changed."},{"const":"completed","description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThe system updates the updated_at timestamp whenever this field is changed."}],"description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThe system updates the updated_at timestamp whenever this field is changed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was created. Always set to current time in Asia/Seoul timezone upon creation. Never modified.\n\nRecords the exact date and time (in Asia/Seoul timezone) when the todo item was first created in the system.\n\nThis timestamp is set once at item creation and never modified, even if the item's title or status is later changed.\n\nThe value is stored in Timestamptz format in the database and is always converted to UTC for internal processing, then displayed in Asia/Seoul timezone to the user.\n\nThis field is used to sort todo items in descending order (newest first) as required by the business rules.\n\nIt is indexed on (todo_list_member_id, created_at) for efficient retrieval of a user's todo items by creation date."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was last modified (title updated or status toggled). Always updated on changes. Not set on creation.\n\nRecords the date and time of the most recent modification to the todo item.\n\nThis timestamp is automatically updated whenever the title or status is changed.\n\nWhen the todo item is first created, updated_at is set to the same value as created_at.\n\nSubsequent updates to title or status trigger an update to updated_at to reflect the latest change.\n\nThis field helps display the most recently modified items at the top of lists.\n\nThe timestamp is stored in Timestamptz format in the database and represents Asia/Seoul timezone in display contexts."}},"required":["id","todo_list_member_id","title","status","created_at","updated_at"],"description":"Todo items owned by members. Each todo represents a personal task that can be toggled between active and completed states.\n\nThis model is primary as users directly manage these items independently through creation, editing, status toggling, and deletion operations.\n\nAll todo items are owned by a single member via the todo_list_member_id foreign key, ensuring strict data ownership.\n\nThe system prevents users from seeing, modifying, or even knowing about todo items belonging to other users.\n\nThe title field must be 1-255 characters, non-empty, and non-whitespace only, as defined by business rules.\n\nThe status field can only be 'active' or 'completed', representing the lifecycle of the todo.\n\nCreation timestamp is immutable. Update timestamp changes on any modification.\n\nNo soft delete capability exists in this model - deletion is permanent and irreversible.\n\nThis entity represents the core data model for the personal task management application."},"ITodoListTodo.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":255,"description":"The task title. Must be 1-255 characters, non-empty, non-whitespace only.\n\nPreserves internal whitespace but trims leading/trailing spaces.\n\nThis field represents the primary content of the todo item, the user's task description.\n\nThe system enforces the business rule that the title must be between 1 and 255 characters and cannot be empty or consist solely of whitespace.\n\nWhen a user submits a title with leading/trailing whitespace, the system trims it before storage, but preserves all internal whitespace.\n\nThis field is indexed for full-text search using PostgreSQL trigram operations (gin_trgm_ops) to enable real-time partial matching.\n\nThe title is the only editable field for active todos; once status is set to 'completed', the title becomes frozen and cannot be modified.\n\nThis is the only field required in this request type. All other fields (id, todo_list_member_id, status, created_at, updated_at) are auto-generated by the system and must not be provided by the client."}},"required":["title"],"description":"Request body for creating a new todo item.\n\nThis type represents the information required to create a new todo item for the authenticated member.\n\nThe system requires only the title field for creation. This ensures that clients cannot set or manipulate other fields like id, created_at, updated_at, or todo_list_member_id.\n\nThe todo_list_member_id is automatically assigned to the authenticated user's ID, enforcing strict data ownership.\n\nThe status field is automatically set to 'active' upon creation.\n\nThe created_at and updated_at fields are automatically set to the current date and time (Asia/Seoul timezone).\n\nThe system validates the title field: it must be between 1 and 255 characters and cannot be empty or contain only whitespace.\n\nIf the validation fails, the system returns a 400 Bad Request without creating any database record."},"ITodoListTodo.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":255,"description":"The task title. Must be 1-255 characters, non-empty, non-whitespace only.\n\nPreserves internal whitespace but trims leading/trailing spaces.\n\nThis field represents the primary content of the todo item, the user's task description.\n\nThe system enforces the business rule that the title must be between 1 and 255 characters and cannot be empty or consist solely of whitespace.\n\nWhen a user submits a title with leading/trailing whitespace, the system trims it before storage, but preserves all internal whitespace.\n\nThis field is indexed for full-text search using PostgreSQL trigram operations (gin_trgm_ops) to enable real-time partial matching.\n\nThe title is the only editable field for active todos; once status is set to 'completed', the title becomes frozen and cannot be modified.\n\nThis field may be included to update the title of the todo item. If included, the new value must meet the length and content constraints.\n\nIf this field is provided and the todo item's status is 'completed', the system will reject the update with a 403 Forbidden response."},"status":{"oneOf":[{"const":"active","description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThis field may be included to toggle the status of the todo item. If provided, the system will validate that the new status is valid and perform the transition.\n\nIf this field is set to 'completed' and the item was active, the status is changed and updated_at is updated.\n\nIf this field is set to 'active' and the item was completed, the status is changed and updated_at is updated."},{"const":"completed","description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThis field may be included to toggle the status of the todo item. If provided, the system will validate that the new status is valid and perform the transition.\n\nIf this field is set to 'completed' and the item was active, the status is changed and updated_at is updated.\n\nIf this field is set to 'active' and the item was completed, the status is changed and updated_at is updated."}],"description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThis field may be included to toggle the status of the todo item. If provided, the system will validate that the new status is valid and perform the transition.\n\nIf this field is set to 'completed' and the item was active, the status is changed and updated_at is updated.\n\nIf this field is set to 'active' and the item was completed, the status is changed and updated_at is updated."}},"required":[],"description":"Request body for updating a todo item's title or status.\n\nThis type represents the information required to modify an existing todo item.\n\nIt allows for partial updates - either title, status, or both can be provided.\n\nIf neither field is provided, the request is invalid (400 Bad Request).\n\nThe system enforces business rules:\n- title must be 1-255 characters and non-empty\n- status must be either 'active' or 'completed'\n- title cannot be updated if status is 'completed'\n- untouched fields remain unchanged\n\nThe todo_list_member_id is not allowed in this request type, as it's immutable and always enforced by authentication context.\n\nThe id is provided via the path parameter, not request body, to avoid parameter tampering.\n\nThis request type supports the update workflow for users who need to edit task titles or toggle completion status, following the principle of least privilege by completely excluding the owner ID from client input."},"ITodoListTodo.IRequest":{"type":"object","properties":{"search":{"type":"string","maxLength":100,"description":"Partial text search term to match against task titles.\n\nPerforms fuzzy matching using PostgreSQL trigram operations (gin_trgm_ops) for efficient substring matching.\n\nThe search term can be any substring within the title. For example: searching for 'work' will match 'Work project', 'Work from home', etc.\n\nThis field supports user-friendly discovery of tasks among potentially hundreds of entries.\n\nThe maximum length is limited to 100 characters to prevent expensive or malicious search queries.\n\nThe search is case-insensitive and works regardless of spacing or punctuation.\n\nThis field is optional - if not provided, all task titles are considered matching."},"status":{"oneOf":[{"const":"active","description":"Filter todo items by their current state.\n\nAllows users to view only active tasks, only completed tasks, or both (default).\n\nWhen this field is provided, the system filters the results to include only todo items with the specified status.\n\nIf not provided, the query returns all todo items regardless of status.\n\nThis filter is implemented with an efficient index on (status, todo_list_member_id) to ensure fast filtering.\n\nOnly 'active' and 'completed' values are allowed, consistent with the business rules."},{"const":"completed","description":"Filter todo items by their current state.\n\nAllows users to view only active tasks, only completed tasks, or both (default).\n\nWhen this field is provided, the system filters the results to include only todo items with the specified status.\n\nIf not provided, the query returns all todo items regardless of status.\n\nThis filter is implemented with an efficient index on (status, todo_list_member_id) to ensure fast filtering.\n\nOnly 'active' and 'completed' values are allowed, consistent with the business rules."}],"description":"Filter todo items by their current state.\n\nAllows users to view only active tasks, only completed tasks, or both (default).\n\nWhen this field is provided, the system filters the results to include only todo items with the specified status.\n\nIf not provided, the query returns all todo items regardless of status.\n\nThis filter is implemented with an efficient index on (status, todo_list_member_id) to ensure fast filtering.\n\nOnly 'active' and 'completed' values are allowed, consistent with the business rules."},"created_after":{"type":"string","format":"date-time","description":"Filter tasks created after a specific date and time (UTC).\n\nTimestamp must be given in ISO 8601 format (e.g., '2023-05-15T10:30:00Z').\n\nThe system converts this value to Asia/Seoul timezone for comparison against the created_at field.\n\nThis filter allows users to retrieve tasks created after a specific date, useful for reviewing recent additions or restarting a project.\n\nThis filter is optional. If omitted, there is no lower bound on creation date."},"created_before":{"type":"string","format":"date-time","description":"Filter tasks created before a specific date and time (UTC).\n\nTimestamp must be given in ISO 8601 format (e.g., '2023-05-15T10:30:00Z').\n\nThe system converts this value to Asia/Seoul timezone for comparison against the created_at field.\n\nThis filter allows users to retrieve tasks created before a specific date, useful for reviewing historical tasks or archiving older items.\n\nThis filter is optional. If omitted, there is no upper bound on creation date."},"sort":{"oneOf":[{"const":"created_at","description":"The field used to sort the results.\n\nSpecifies whether results should be sorted by creation time ('created_at') or last update time ('updated_at').\n\nDefault value is 'created_at' if this parameter is not provided.\n\nThis filter helps users organize their list according to their preference: newest first by creation or by last modification."},{"const":"updated_at","description":"The field used to sort the results.\n\nSpecifies whether results should be sorted by creation time ('created_at') or last update time ('updated_at').\n\nDefault value is 'created_at' if this parameter is not provided.\n\nThis filter helps users organize their list according to their preference: newest first by creation or by last modification."}],"description":"The field used to sort the results.\n\nSpecifies whether results should be sorted by creation time ('created_at') or last update time ('updated_at').\n\nDefault value is 'created_at' if this parameter is not provided.\n\nThis filter helps users organize their list according to their preference: newest first by creation or by last modification."},"order":{"oneOf":[{"const":"asc","description":"The direction of sorting.\n\nSpecifies whether the results should be in ascending ('asc') or descending ('desc') order.\n\nDefault value is 'desc' (newest first) if this parameter is not provided.\n\nThis allows users to reverse the ordering when desired - for example, to see oldest tasks first by combining sort:'created_at' with order:'asc'."},{"const":"desc","description":"The direction of sorting.\n\nSpecifies whether the results should be in ascending ('asc') or descending ('desc') order.\n\nDefault value is 'desc' (newest first) if this parameter is not provided.\n\nThis allows users to reverse the ordering when desired - for example, to see oldest tasks first by combining sort:'created_at' with order:'asc'."}],"description":"The direction of sorting.\n\nSpecifies whether the results should be in ascending ('asc') or descending ('desc') order.\n\nDefault value is 'desc' (newest first) if this parameter is not provided.\n\nThis allows users to reverse the ordering when desired - for example, to see oldest tasks first by combining sort:'created_at' with order:'asc'."},"page":{"type":"integer","minimum":1,"maximum":1000,"description":"Page number for pagination.\n\nSpecifies which page of results should be returned when using pagination.\n\nPage numbers start at 1 (not 0).\n\nMaximum page number is 1000 to prevent excessive memory usage.\n\nThis parameter works in conjunction with the limit parameter to enable navigation through large result sets.\n\nIf omitted, page defaults to 1 (first page)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Number of results per page in pagination.\n\nSpecifies how many tasks to return per page.\n\nMinimum is 1 task, maximum is 200 tasks to prevent excessive response size and processing time.\n\nDefault value is 20 if omitted.\n\nThis parameter enables efficient client-side rendering of task lists without loading all items at once.\n\nThe value directly impacts how much data is transferred in each API request."}},"required":[],"description":"Search and filtering parameters for retrieving todo items.\n\nThis type represents the body of a search request that allows users to filter, order, and paginate their todo items.\n\nThe parameters are all optional except for the requirement that at least one must be provided if the request body exists (though in practice, the ID parameter is given in the path).\n\nMultiple filters can be combined - for example, a user can search for 'meeting' with status:'active' and sort by updated_at:desc.\n\nPage and limit are used together to enable pagination.\n\nThe search uses trigram matching for efficient fuzzy text searching on titles.\n\nDate filtering uses ISO 8601 timestamps (UTC) which are converted to Asia/Seoul for comparison.\n\nThis flexible interface enables the user interface to implement advanced filtering controls while maintaining simple, safe API boundaries."},"IPage.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"maximum":1000,"description":"Page number.\n\nSpecifies which page of results to return.\n\nPage numbers start at 1.\n\nMaximum is 1000 to prevent server resource overuse.\n\nThis parameter is optional, defaults to 1 if not provided.\n\nShould be used in conjunction with limit for pagination."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Limitation of records per a page.\n\nSpecifies how many results to return per page.\n\nMinimum is 1, maximum is 200 to prevent excessively large responses.\n\nDefault value is 20 if omitted.\n\nThis parameter allows clients to control the amount of data transferred in one request."}},"required":[],"description":"Page request data for paginated searches.\n\nThis type represents the pagination parameters submitted in request bodies for list endpoints.\n\nIt is the subset of ITodoListTodo.IRequest that contains only page and limit parameters.\n\nThis structure is designed to be used when only pagination control is needed, without other search or filter criteria.\n\nIt is typically used internally by UI components that implement pagination without additional filtering.\n\nNote: Although this type exists, the search endpoint uses the more comprehensive ITodoListTodo.IRequest which includes these two fields plus additional filter options."},"ITodoListMember.IUpdatePassword":{"type":"object","properties":{"current_password_hash":{"type":"string","description":"Current password hash for validating the user's identity.\n\nThis field contains the bcrypt-hashed version of the user's current password.\n\nThe system validates this against the stored password_hash in the todo_list_members table before allowing password changes.\n\nThis prevents unauthorized password changes by ensuring the user knows their current password.\n\nThe password is never sent as plain text; it is always hashed using bcrypt with cost factor 12 before transmission."},"new_password_hash":{"type":"string","description":"New password hash to replace the current one.\n\nThis field contains the bcrypt-hashed version of the new password the user wants to use.\n\nThe system validates that the new password meets minimum security requirements (at least 8 characters) before hashing.\n\nThe bcrypt implementation uses cost factor 12 to ensure resistance to brute force attacks.\n\nAfter successful validation, the system updates the password_hash field in the todo_list_members table with this value and updates the updated_at timestamp."}},"required":["current_password_hash","new_password_hash"],"description":"Request body for member password update operation.\n\nThis type represents the credentials required to change a member's password.\n\nThe system requires both the current password hash and the new password hash for security.\n\nThe current_password_hash is validated against the stored password_hash in the todo_list_members table.\n\nThe new_password_hash is checked for minimum security requirements (at least 8 characters) before being stored.\n\nBoth passwords are hashed using bcrypt with cost factor 12 to prevent exposure of plain text passwords.\n\nThis process ensures that only the user who knows the current password can change it.\n\nAfter successful update, the system updates the updated_at timestamp in the todo_list_members table."},"ITodoListMember.IRequestPasswordReset":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address used for password reset request.\n\nThis field specifies which member account requests a password reset.\n\nThe system validates that the email exists in the todo_list_members table.\n\nFor security purposes, the system never discloses whether the email exists - if invalid, it returns a generic success message.\n\nDue to system architecture constraints, no email delivery system is implemented in this schema, so this operation only generates a reset token without external communication."}},"required":["email"],"description":"Request body for initiating password reset process.\n\nThis type represents the email address used to initiate the password reset workflow.\n\nThe system generates a cryptographically secure reset token bound to the provided email address.\n\nThe reset token has a 15-minute expiration and is stored in the system's secure token store.\n\nThe system implements security best practices by not disclosing whether the email exists in the database.\n\nThe original request does not modify any data in todo_list_members table.\n\nAfter initiating this request, the user would typically receive the reset token via email through an external system not defined in this schema."},"ITodoListMember.IResetInitiated":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for which password reset was initiated.\n\nThis field confirms the email address associated with the password reset request.\n\nThe system does not reveal whether this email exists in the database for security purposes, even though the reset has been initiated.\n\nThis representation ensures that the response matches the request for audit trail purposes.\n\nThe reset token is generated and stored securely but not included in this response for security reasons as it is intended to be delivered via email through an external system not defined in this schema."}},"required":["email"],"description":"Response body for password reset initiation operation.\n\nThis type represents the confirmation message after a password reset has been successfully initiated.\n\nThe system returns this confirmation regardless of whether the email exists in the database for security purposes.\n\nThis response confirms to the client that the request was processed but does not reveal any information about the existence of the account.\n\nThe actual reset token is generated and stored securely by the system but is not included in this response because it is intended to be delivered to the user via email through an external system not defined in this schema.\n\nThe response structure matches the request email to maintain consistency and provide audit trail."},"ETodoListMemberRole":{"const":"member","description":"Enumeration of user roles available in the system.\n\nThis enum defines the single supported role: 'member'. The Todo List application supports exactly one user role to maintain simplicity and enforce strict data ownership.\n\nNo other roles are allowed (e.g., admin, guest). All users are members, and all member data is isolated and private. Role assignment is stored in the todo_list_member_roles table and linked to each member via todo_list_member_id.\n\nThis enum ensures type safety and consistency when roles are referenced across the system. The value 'member' must match exactly as defined in the todo_list_member_roles table's role_name column."},"ITodoListMember.ICompletePasswordReset":{"type":"object","properties":{"reset_token":{"type":"string","description":"Cryptographically secure token issued during password reset initiation.\n\nThis token is a short-lived, one-time-use credential that authenticates the password reset request.\n\nThe token is bound to a specific email address and expires after 15 minutes.\n\nThe system validates that the token is: 1) valid and unexpired; 2) associated with a registered email address; and 3) hasn't been used before.\n\nAfter successful validation, the system updates the password_hash field in the todo_list_members table with the new password hash."},"new_password_hash":{"type":"string","description":"New password hash to replace the current one.\n\nThis field contains the bcrypt-hashed version of the new password the user wants to use.\n\nThe system validates that the new password meets minimum security requirements (at least 8 characters) before hashing.\n\nThe bcrypt implementation uses cost factor 12 to ensure resistance to brute force attacks.\n\nAfter successful validation, the system updates the password_hash field in the todo_list_members table with this value and updates the updated_at timestamp."}},"required":["reset_token","new_password_hash"],"description":"Request body for completing password reset process.\n\nThis type represents the credentials required to finalize a password reset.\n\nThe system requires both the reset_token and new_password_hash to complete the process.\n\nThe reset_token is validated to ensure it is valid, unexpired, and not previously used.\n\nThe new_password_hash is checked for minimum security requirements (at least 8 characters) before being stored.\n\nBoth fields are required for security - the reset_token proves identity without knowing the current password and the new_password_hash sets the new credential.\n\nAfter successful validation, the system updates the password_hash field in the todo_list_members table and the updated_at timestamp, then issues a new JWT access token."},"ITodoListTodo.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the todo item.\n\nThis UUID is generated by the system upon creation and is used as the primary reference for all operations involving this todo item.\n\nThe ID is immutable and persists for the lifetime of the todo item, even if other properties like title or status are changed.\n\nThis field is critical for establishing data ownership, as each todo item is linked to a member via the todo_list_member_id foreign key in the todo_list_members table.\n\nAll CRUD operations on todo items require this id as a path parameter to identify the exact item being modified."},"title":{"type":"string","minLength":1,"maxLength":255,"description":"The task title. Must be 1-255 characters, non-empty, non-whitespace only.\n\nPreserves internal whitespace but trims leading/trailing spaces.\n\nThis field represents the primary content of the todo item, the user's task description.\n\nThe system enforces the business rule that the title must be between 1 and 255 characters and cannot be empty or consist solely of whitespace.\n\nWhen a user submits a title with leading/trailing whitespace, the system trims it before storage, but preserves all internal whitespace.\n\nThis field is indexed for full-text search using PostgreSQL trigram operations (gin_trgm_ops) to enable real-time partial matching.\n\nThe title is the only editable field for active todos; once status is set to 'completed', the title becomes frozen and cannot be modified."},"status":{"oneOf":[{"const":"active","description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThe system updates the updated_at timestamp whenever this field is changed."},{"const":"completed","description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThe system updates the updated_at timestamp whenever this field is changed."}],"description":"Current state of the todo item. Must be exactly 'active' or 'completed'.\n\nNewly created items have 'active' status. Title cannot be edited when status is 'completed'.\n\nThis field represents the lifecycle state of the todo item and is central to its behavior.\n\nThe system restricts allowed values to only 'active' and 'completed', preventing invalid states.\n\nWhen the status is 'active', the item is displayed in the task list and the user can edit its title.\n\nWhen the status is 'completed', the item is moved to the completed section and the title becomes read-only.\n\nThe status can be toggled back and forth between active and completed, but no other values are allowed.\n\nThe system updates the updated_at timestamp whenever this field is changed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was created. Always set to current time in Asia/Seoul timezone upon creation. Never modified.\n\nRecords the exact date and time (in Asia/Seoul timezone) when the todo item was first created in the system.\n\nThis timestamp is set once at item creation and never modified, even if the item's title or status is later changed.\n\nThe value is stored in Timestamptz format in the database and is always converted to UTC for internal processing, then displayed in Asia/Seoul timezone to the user.\n\nThis field is used to sort todo items in descending order (newest first) as required by the business rules.\n\nIt is indexed on (todo_list_member_id, created_at) for efficient retrieval of a user's todo items by creation date."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was last modified (title updated or status toggled). Always updated on changes. Not set on creation.\n\nRecords the date and time of the most recent modification to the todo item.\n\nThis timestamp is automatically updated whenever the title or status is changed.\n\nWhen the todo item is first created, updated_at is set to the same value as created_at.\n\nSubsequent updates to title or status trigger an update to updated_at to reflect the latest change.\n\nThis field helps display the most recently modified items at the top of lists.\n\nThe timestamp is stored in Timestamptz format in the database and represents Asia/Seoul timezone in display contexts."}},"required":["id","title","status","created_at","updated_at"],"description":"Summary representation of a todo item for display in lists.\n\nThis type represents a lightweight version of the todo item, optimized for display in lists and search results.\n\nUnlike the full ITodoListTodo type, this summary version is intentionally complete for human-readable display - it includes all necessary information to render a task item.\n\nIt excludes no fields from the full entity, as all fields (id, title, status, created_at, updated_at) are relevant and safe for display.\n\nEach field is described in detail as it appears in the full entity.\n\nThis type is used by the search operation and other endpoints returning lists of todo items.\n\nNote: Although this is called a 'summary', it includes all fields as none of them are sensitive or need to be excluded in a personal task management system."}}}}