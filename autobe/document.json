{"operations":[{"specification":"This API operation handles user registration (join) for the TodoList application. Since the system has no authentication system from the user's requirements, this operation creates a temporary token-based context for the single 'user' role, generating temporary tokens to maintain session state locally. This aligns with the Prisma schema's todo_list_task model, demonstrating the single-user nature of the system where all operations are performed under implicit user context without account creation.","authorizationType":"join","description":"This registration (join) operation creates a temporary token-based context for the single user of the TodoList application. The system is explicitly designed without user authentication, accounts, or identity management, so there are no user records, login credentials, or server-side session storage in the Prisma schema—the only persistent entity is the todo_list_task table containing id, title, and is_completed fields. Therefore, this join operation does not collect user credentials or personal data—it merely creates a session context for local persistence. This is different from traditional systems where join operations create user records; here, no user record exists in the database.\n\nThe operation returns a token that correlates with a local storage key, allowing the client to retrieve and modify tasks. Since no user table exists in Prisma schema, no user-specific data is stored—only task data in todo_list_task. The token is cryptographically generated and stored client-side, not server-side, satisfying the requirement that all operations occur under implicit user context.\n\nThis join operation enables the system to meet the requirement that task data persists between sessions without any authentication or syncing mechanism. Since the schema has no fields for user_id, email, password, or any authentication metadata, the session token is the only artifact needed to maintain state locally. This operation is non-identity-based; it doesn't create a user identity—it creates a persistent local context.\n\nSecurity is maintained through token secrecy on the client side, as there is no server-side storage of tokens or user data. This approach aligns completely with the Prisma schema which lacks any authentication columns.\n\nSince the system has no login, refresh, or session management schema fields, the only required operations are join (to establish temporary context) and refresh (to renew tokens). The single-user constraint makes any other authentication operations redundant and prohibited by the functional requirements.","summary":"Creates temporary session context for single-user TodoList application without authentication or user records.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a temporary access token in JSON format, along with its expiration time, to establish client-side session context for the TodoList application. Since the system has no user accounts and only maintains task data in todo_list_task with no user-specific fields, this response contains a cryptographic token that maps to a local storage key. The token enables the client to persistently retrieve and modify tasks between sessions without needing user authentication. No user identity information, email, password, or other authentication metadata is returned because no such fields exist in the Prisma schema.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"This API operation handles authentication login for the TodoList application. Since the system has a single implicit user context with no accounts or authentication system, the login operation serves as an explicit confirmation of the user's identity for session establishment. The Prisma schema contains only the todo_list_task table with fields id, title, and is_completed, with no user table, email field, password field, or any authentication metadata. This login operation is provided as a required authorization operation for the 'member' role as per the generation rules, without requiring any authentication fields from the schema to validate credentials.","authorizationType":"login","description":"This login operation is required for the 'member' role as defined by the role-based essential operations rule, even though the TodoList application has no authentication infrastructure. Because the role.kind is \"member\", the system must generate a login operation alongside join and refresh, per the mandatory generation logic. The Prisma schema contains no user table and no authentication fields (no email, password, created_at, session_token, is_active, etc.)—only the todo_list_task table with id, title, and is_completed. Therefore, this login operation does not validate any credentials or retrieve any user data from the database.\n\nThe login endpoint exists solely for compliance with the authorization generation rules. The operation accepts no request body and returns a new access token, effectively re-establishing the system's single implicit user context. There is no password, username, or session identifier verification because the schema contains no fields for these. This operation merely acts as a client-side token issuance mechanism, distinct only by name from join and refresh, to satisfy the authorization generation template.\n\nSince there are no authentication fields in the schema, this login implementation cannot perform credential validation, account existence checks, security audits, or authentication logic. It is a purely syntactic placeholder that enables the system to generate a valid authorization interface for the member role, consistent with the specified generation rules. The security context remains entirely client-side, and no data from the todo_list_task table is used in this operation.\n\nThis operation is mandatory because the user's role is defined as \"member\" and the specification dictates that member and admin roles must include login. Even though the schema lacks authentication fields, the generation system requires this operation to be present. This is a technical constraint fulfillment, not a functional implementation.\n\nNo related authentication operations are possible because the Prisma schema contains no fields for user credentials, password resets, email verification, or session management—all explicitly prohibited by the functional requirements. The login operation is functionally redundant but structurally mandated by the authorization template.\n\nThis is compliant with the generation rules: role.kind === \"member\" requires join, login, and refresh. The Prisma schema defines what data can be persisted, not what operations must be declared. As such, the operation is generated for template compliance despite having no implementation logic based on auth fields.","summary":"Establishes client-side token session for member role as required by authorization template despite no authentication fields in schema.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a new temporary access token to establish client-side session context for the member role. Since the Prisma schema contains no authentication fields, there is no credential validation, user verification, or database lookup. The token is generated as a pure client-side convenience to satisfy the required authorization operation structure for the member role. No information from the todo_list_task table is used or returned. This is required by the generation template despite the lack of schema-based authentication properties.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"This API operation handles token refresh for the TodoList application. Since the system has no authentication system from the user's requirements, this operation renews the temporary client-side session token used to maintain state across browser sessions. The Prisma schema contains only the todo_list_task table with fields id, title, and is_completed and has no user authentication fields (email, password, created_at, etc.), so this refresh operation is purely a client-side mechanism to maintain local persistence without server-side state.","authorizationType":"refresh","description":"This refresh operation renews the temporary client-side session token used to maintain state across browser sessions for the TodoList application. The system is explicitly designed without authentication, user accounts, or identity management, so there are no user records, login credentials, or server-side session storage in the Prisma schema—the only persistent entity is the todo_list_task table containing id, title, and is_completed fields. Therefore, this refresh operation does not authenticate users or validate credentials—there are no such mechanisms.\n\nInstead, when the client's temporary token expires, this endpoint regenerates a new token with the same session context and returns it. This maintains state persistence for the single implicit user without relying on any user-specific database fields (which do not exist). The token is stored in local storage and used by the client to access task data. Since the schema contains no fields such as refresh_token, last_login, or session_expiry, no server-side token validation or storage occurs. The refresh endpoint simply reissues the token.\n\nThis approach fulfills the requirement that task data persists between sessions without any authentication or syncing mechanism. The operation has no security implications tied to the database, as no user data is stored. All state is maintained client-side using this token system, perfectly aligning with the Prisma schema which lacks any authentication columns.\n\nRefresh is required because temporary tokens expire and must be renewed to maintain the illusion of persistence. Since there is no login functionality (which would require authentication fields that do not exist in the schema), the only two authentication-related operations are join (initial context creation) and refresh (token renewal). Both serve purely local state maintenance for the single-user context defined in the requirements.\n\nNo related authentication operations are possible because the Prisma schema contains no fields for user credentials, password resets, email verification, or session management—all explicitly prohibited by the functional requirements.","summary":"Renews temporary session token for local state persistence in single-user TodoList application.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a new temporary access token with an updated expiration time, maintaining the same client-side session context for the TodoList application. Since the Prisma schema has no user table, no authentication fields, and no server-side storage of tokens, this response contains no user-specific information—only a newly generated cryptographic token that maps to the same local storage key. No user identity, email, password, or other authentication metadata is included because no such fields exist in the schema. The token enables continued access to the task list between sessions while maintaining the no-authentication requirement.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This operation retrieves all todo tasks stored in the system. It operates on the todo_list_task table from the Prisma schema, which contains only id, title, and is_completed fields. No authentication, pagination, or filtering is applied. This is a simple list retrieval operation that returns all tasks in creation order.","path":"/todoList/todos","method":"get","summary":"Retrieve all todo tasks","description":"Retrieve a complete list of all todo tasks stored in the system. This operation queries the todo_list_task table from the Prisma schema, which contains only the id, title, and is_completed fields. The system maintains no user authentication, session state, or multi-user context. All tasks are returned in ascending order of creation time (earliest first) as defined by the database storage mechanism.\n\nThe operation returns all tasks regardless of completion status, as per the requirement that tasks must be displayed in a single unfiltered list. No filtering, searching, sorting, or pagination is implemented, in alignment with the 'minimal viable functionality' principle established in the requirements.\n\nThis operation is public and requires no authentication, as the Todo List application operates under a single implicit user context with no identity or account system. The response includes only the id, title, and is_completed fields as defined in the schema, with no additional metadata, timestamps, or user identifiers.","parameters":[],"requestBody":null,"responseBody":{"description":"Array of todo tasks containing id, title, and is_completed fields","typeName":"IPageITodoListTodoListTask"},"authorizationRole":null,"authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation creates a new todo task with the provided text content. It operates on the todo_list_task table from the Prisma schema, which contains only id, title, and is_completed fields. The task is created with is_completed set to false by default, and the title is validated against the 500-character limit specified in the schema description. No authentication is required.","path":"/todoList/todos","method":"post","summary":"Create a new todo task","description":"Create a new todo task with the provided text content. This operation inserts a new record into the todo_list_task table from the Prisma schema. The title field must contain at least one non-whitespace character and be truncated to 500 characters if longer, as specified in the schema description. Leading and trailing whitespace is trimmed, and internal whitespace is preserved. The is_completed field is automatically set to false by default, as defined in the schema.\n\nThe system rejects empty or whitespace-only inputs without creating a task, as per the business requirements. This operation has no authentication requirements since the Todo List application operates under a single implicit user context with no user authentication or session management.\n\nThe operation returns the newly created task with its generated id, title, and is_completed state. The response includes only the fields defined in the todo_list_task schema - id, title, and is_completed - with no additional metadata, timestamps, or user identifiers.","parameters":[],"requestBody":{"description":"Request body containing the task title for creation","typeName":"ITodoListTodoListTask.ICreate"},"responseBody":{"description":"The newly created todo task containing id, title, and is_completed fields","typeName":"ITodoListTodoListTask"},"authorizationRole":null,"authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation toggles the completion status of a specific todo task identified by its unique ID. It operates on the todo_list_task table from the Prisma schema, which contains only id, title, and is_completed fields. The is_completed property is toggled between true and false based on the current state. The operation silently fails if the task ID doesn't exist. No authentication is required.","path":"/todoList/todos/{id}","method":"patch","summary":"Toggle completion status of a todo task","description":"Toggle the completion status of a specific todo task identified by its unique ID. This operation updates the is_completed field in the todo_list_task table from the Prisma schema. When a task is submitted with is_completed set to false, it is updated to true. When submitted with is_completed set to true, it is updated to false. The operation is idempotent and follows the business rules that specify the status can only be changed between incomplete and complete states.\n\nThe operation silently ignores requests where the specified ID does not exist in the system, in accordance with the error handling specifications. No user authentication is required since the Todo List application operates under a single implicit user context with no identity verification.\n\nThe request body must contain the is_completed boolean value representing the target state. The response returns the updated task with its id, title, and updated is_completed status, consistent with the schema definition.","parameters":[{"name":"id","description":"Unique identifier of the target todo task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Target completion status to toggle the task to","typeName":"ITodoListTodoListTask.IUpdate"},"responseBody":{"description":"The updated todo task containing id, title, and is_completed fields","typeName":"ITodoListTodoListTask"},"authorizationRole":null,"authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/todoList/todos","method":"post"},"description":"Todo task must be created before its completion status can be toggled"}]},{"specification":"This operation permanently deletes a todo task identified by its unique ID. It operates on the todo_list_task table from the Prisma schema, which contains only id, title, and is_completed fields. The deletion is permanent and irreversible, with no soft delete mechanism in the schema. The operation silently fails if the task ID doesn't exist. No authentication is required.","path":"/todoList/todos/{id}","method":"delete","summary":"Permanently delete a todo task","description":"Permanently delete a todo task identified by its unique ID. This operation removes a record from the todo_list_task table from the Prisma schema. The schema contains no soft delete fields (e.g., deleted_at, is_deleted), so this is a hard delete operation that permanently removes the task data from storage.\n\nThe operation silently ignores requests where the specified ID does not exist in the system, as required by the error handling specifications. No user authentication is required since the Todo List application operates under a single implicit user context with no identity verification.\n\nThere is no request body for this operation. The response does not return any data, as deletion is a destructive operation with no confirmation or returned payload required by the requirements.","parameters":[{"name":"id","description":"Unique identifier of the todo task to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":null,"authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/todoList/todos","method":"post"},"description":"Todo task must be created before it can be deleted"}]}],"components":{"authorization":[{"name":"user","description":"The single user who creates, views, updates, and deletes their own todo tasks. No other users exist. This role has full control over all tasks in the local scope.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTodoListTask":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodoListTask"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the session context in the TodoList application.\n\nSince the system operates with no user authentication or accounts, this ID represents a temporary client-side session context. It is not linked to any user record in the database as no user entity exists in the Prisma schema. The value is cryptographically generated upon join or refresh and used by the client to maintain task state between sessions."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token for the single-user TodoList application.\n\nThis type defines the structure of the response returned from join, login, and refresh operations. Despite the requirement for authorization operations due to the 'member' role specification, the underlying Prisma schema contains no user authentication data. This type therefore does not represent a real user entity but rather a temporary client-side session context identifier. It aligns with the application's design principle of being a single-user, locally persistent tool with no authentication, accounts, or user identity management."},"ITodoListTodoListTask.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":500,"description":"The text content of the task.\n\nThis field represents the user's input for a new todo item. Must contain at least one non-whitespace character. Leading and trailing whitespace is removed before storage, but internal whitespace is preserved. The value is truncated to 500 characters if longer, as specified in the Prisma schema description.\n\nPer the business rules, empty strings, only whitespace, or Unicode whitespace-only strings are rejected. The system treats task text as case-sensitive, so \"Buy milk\" and \"buy MILK\" are considered distinct.\n\nThis field corresponds exactly to the 'title' column in the todo_list_task table in the Prisma schema, and no other fields from the entity can be included in this create operation."}},"required":["title"],"description":"Request body schema for creating a new todo task.\n\nThis type defines the data format required to add a new task to the system. Per the requirements and Prisma schema, only the task title is accepted in this request. All other fields are system-managed: the 'id' is auto-generated as a UUID, and 'is_completed' defaults to false. No user identifiers, timestamps, or metadata fields are permitted in this request since they are not part of the Prisma schema and would violate the single-user, non-authenticating design principle."},"ITodoListTodoListTask":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the todo task.\n\nThis field contains the system-generated UUID assigned when the task is created. It is managed entirely by the system and should not be provided by clients in any request. The value is stored in the 'id' column of the todo_list_task table in the Prisma schema. This identifier is used for all subsequent operations on the task (update, delete)."},"title":{"type":"string","description":"The text content of the task.\n\nThis field represents the user's input for the task. It is stored exactly as validated during creation: stripped of leading/trailing whitespace, truncated to 500 characters if necessary, and preserved as a case-sensitive string. This corresponds directly to the 'title' column in the todo_list_task table.\n\nPer the business rules, multiple tasks with identical text exist as distinct records, and case differences are treated as separate tasks."},"is_completed":{"type":"boolean","description":"The completion status of the task.\n\nThis field indicates whether the task has been marked as completed (true) or is pending (false). It corresponds exactly to the 'is_completed' column in the todo_list_task table in the Prisma schema. The default value is false when a task is created. The status can be toggled between true and false via update operations, but no other status values are permitted.\n\nAll tasks, regardless of completion status, are always displayed in the list view as per the application's minimal design requirement."}},"required":["id","title","is_completed"],"description":"Full representation of a todo task.\n\nThis type defines the complete structure of a task returned in responses from GET /todos/{id} and POST /todos operations. It includes all fields defined in the todo_list_task table of the Prisma schema: id, title, and is_completed. No additional fields are included since the schema does not contain timestamps, user identifiers, or any metadata. This representation is used when the full task details are required, such as viewing individual tasks or after creation. The type entirely mirrors the database schema with no extensions or modifications."},"ITodoListTodoListTask.IUpdate":{"type":"object","properties":{"is_completed":{"type":"boolean","description":"Target completion status to toggle the task to.\n\nThis field specifies the desired state for the task's completion status. The system will toggle the current value: if the task is currently incomplete (false), setting this to true will mark it as completed; if currently completed (true), setting this to false will mark it as incomplete.\n\nThis field maps directly to the 'is_completed' column in the todo_list_task table of the Prisma schema. No other properties can be modified via this update operation, as the Prisma schema only allows the is_completed field to be changed, and the title and id are immutable. The client must provide the exact target state, not a toggle instruction."}},"required":["is_completed"],"description":"Request body schema for updating the completion status of a todo task.\n\nThis type defines the data format accepted by the PATCH /todos/{id} operation. Per the Prisma schema and business rules, only the is_completed field can be modified on an existing task. The id and title fields are immutable and cannot be changed via update requests. All operations must be based on the system-generated id.\n\nThis form follows the Partial<T> pattern, as only one mutable field is permitted in the schema. The request body must contain exactly one property: is_completed. The system ignores requests that do not contain this property, or that contain other properties, to maintain strict schema compliance."}}}}