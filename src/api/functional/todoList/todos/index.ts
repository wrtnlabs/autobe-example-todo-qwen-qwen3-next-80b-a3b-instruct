import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageITodoListTodoListTask } from "../../../structures/IPageITodoListTodoListTask";
import { ITodoListTodoListTask } from "../../../structures/ITodoListTodoListTask";

/**
 * Retrieve all todo tasks.
 *
 * Retrieve a complete list of all todo tasks stored in the system. This
 * operation queries the todo_list_task table from the Prisma schema, which
 * contains only the id, title, and is_completed fields. The system maintains no
 * user authentication, session state, or multi-user context. All tasks are
 * returned in ascending order of creation time (earliest first) as defined by
 * the database storage mechanism.
 *
 * The operation returns all tasks regardless of completion status, as per the
 * requirement that tasks must be displayed in a single unfiltered list. No
 * filtering, searching, sorting, or pagination is implemented, in alignment
 * with the 'minimal viable functionality' principle established in the
 * requirements.
 *
 * This operation is public and requires no authentication, as the Todo List
 * application operates under a single implicit user context with no identity or
 * account system. The response includes only the id, title, and is_completed
 * fields as defined in the schema, with no additional metadata, timestamps, or
 * user identifiers.
 *
 * @param props.connection
 * @path /todoList/todos
 * @accessor api.functional.todoList.todos.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageITodoListTodoListTask;

  export const METADATA = {
    method: "GET",
    path: "/todoList/todos",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/todos";
  export const random = (): IPageITodoListTodoListTask =>
    typia.random<IPageITodoListTodoListTask>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new todo task with the provided text content. This operation inserts
 * a new record into the todo_list_task table from the Prisma schema. The title
 * field must contain at least one non-whitespace character and be truncated to
 * 500 characters if longer, as specified in the schema description. Leading and
 * trailing whitespace is trimmed, and internal whitespace is preserved. The
 * is_completed field is automatically set to false by default, as defined in
 * the schema.
 *
 * The system rejects empty or whitespace-only inputs without creating a task,
 * as per the business requirements. This operation has no authentication
 * requirements since the Todo List application operates under a single implicit
 * user context with no user authentication or session management.
 *
 * The operation returns the newly created task with its generated id, title,
 * and is_completed state. The response includes only the fields defined in the
 * todo_list_task schema - id, title, and is_completed - with no additional
 * metadata, timestamps, or user identifiers.
 *
 * @param props.connection
 * @param props.body Request body containing the task title for creation
 * @path /todoList/todos
 * @accessor api.functional.todoList.todos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Request body containing the task title for creation */
    body: ITodoListTodoListTask.ICreate;
  };
  export type Body = ITodoListTodoListTask.ICreate;
  export type Response = ITodoListTodoListTask;

  export const METADATA = {
    method: "POST",
    path: "/todoList/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/todos";
  export const random = (): ITodoListTodoListTask =>
    typia.random<ITodoListTodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Toggle completion status of a todo task.
 *
 * Toggle the completion status of a specific todo task identified by its unique
 * ID. This operation updates the is_completed field in the todo_list_task table
 * from the Prisma schema. When a task is submitted with is_completed set to
 * false, it is updated to true. When submitted with is_completed set to true,
 * it is updated to false. The operation is idempotent and follows the business
 * rules that specify the status can only be changed between incomplete and
 * complete states.
 *
 * The operation silently ignores requests where the specified ID does not exist
 * in the system, in accordance with the error handling specifications. No user
 * authentication is required since the Todo List application operates under a
 * single implicit user context with no identity verification.
 *
 * The request body must contain the is_completed boolean value representing the
 * target state. The response returns the updated task with its id, title, and
 * updated is_completed status, consistent with the schema definition.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target todo task
 * @param props.body Target completion status to toggle the task to
 * @path /todoList/todos/:id
 * @accessor api.functional.todoList.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target todo task */
    id: string & tags.Format<"uuid">;

    /** Target completion status to toggle the task to */
    body: ITodoListTodoListTask.IUpdate;
  };
  export type Body = ITodoListTodoListTask.IUpdate;
  export type Response = ITodoListTodoListTask;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/todos/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/todos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITodoListTodoListTask =>
    typia.random<ITodoListTodoListTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a todo task identified by its unique ID. This operation
 * removes a record from the todo_list_task table from the Prisma schema. The
 * schema contains no soft delete fields (e.g., deleted_at, is_deleted), so this
 * is a hard delete operation that permanently removes the task data from
 * storage.
 *
 * The operation silently ignores requests where the specified ID does not exist
 * in the system, as required by the error handling specifications. No user
 * authentication is required since the Todo List application operates under a
 * single implicit user context with no identity verification.
 *
 * There is no request body for this operation. The response does not return any
 * data, as deletion is a destructive operation with no confirmation or returned
 * payload required by the requirements.
 *
 * @param props.connection
 * @param props.id Unique identifier of the todo task to delete
 * @path /todoList/todos/:id
 * @accessor api.functional.todoList.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the todo task to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/todos/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/todos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
