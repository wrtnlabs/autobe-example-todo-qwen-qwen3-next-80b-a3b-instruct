import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodo } from "../../../../structures/ITodoListTodo";
import { IPageITodoListTodo } from "../../../../structures/IPageITodoListTodo";

/**
 * Create a new todo item for the authenticated user with a specified title.
 * This operation follows the business rules that require todo item titles to be
 * between 1 and 255 characters and not empty or whitespace-only. The system
 * enforces these validation rules at the API level before creating any database
 * records.
 *
 * When a valid title is provided, the system creates a new record in the
 * todo_list_todos table with the following automatic assignments:
 *
 * - The todo_list_member_id is set to the authenticated user's ID
 * - The status is set to 'active' by default
 * - The created_at timestamp is set to the current time in Asia/Seoul timezone
 * - The updated_at timestamp is set to the same value as created_at
 * - A unique UUID is generated for the id field
 *
 * If the title violates the business rules (empty, whitespace-only, or exceeds
 * 255 characters), the system rejects the request with an appropriate error
 * response without creating any database record, ensuring data integrity.
 *
 * The system follows the security principle of data ownership, automatically
 * associating the new todo item with the authenticated user and preventing any
 * association with other users. This implementation allows for independent task
 * management without any collaboration features as specified in the
 * requirements.
 *
 * The operation returns the complete created todo item including all fields,
 * confirming successful creation to the client. The response includes the
 * generated UUID, title, status, and timestamps, enabling the client to
 * immediately display the new task in the user interface.
 *
 * @param props.connection
 * @param props.body Creation data for a new todo item
 * @path /todoList/member/todos
 * @accessor api.functional.todoList.member.todos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a new todo item */
    body: ITodoListTodo.ICreate;
  };
  export type Body = ITodoListTodo.ICreate;
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "POST",
    path: "/todoList/member/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/member/todos";
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of todo items for the
 * authenticated user.
 *
 * Retrieve a filtered and paginated list of todo items belonging to the
 * authenticated user. This operation enables users to search through their
 * personal task list using multiple criteria including status filtering,
 * partial title matching, and date range queries. The system ensures strict
 * data ownership by automatically filtering results to include only todo items
 * associated with the authenticated user's ID.
 *
 * The operation supports partial text matching on titles using PostgreSQL
 * trigram operations for efficient fuzzy searching. Users can search for tasks
 * containing specific phrases, and the results are returned in order of
 * relevance. Status filtering allows users to view only active tasks, only
 * completed tasks, or all tasks. Results are sorted by creation date in
 * descending order (newest first) by default.
 *
 * This operation fully supports pagination with configurable page sizes and
 * cursor-based navigation. Each response includes metadata about total count
 * and pagination state, allowing clients to implement infinite scrolling or
 * page navigation interfaces.
 *
 * Security considerations include rate limiting for search operations and
 * immediate rejection of requests attempting to access todo items not owned by
 * the authenticated user. The implementation enforces row-level security at the
 * database level, ensuring that users cannot access or even determine the
 * existence of todo items belonging to other users.
 *
 * This operation integrates with the todo_list_todos table as defined in the
 * Prisma schema, incorporating all available todo fields and relationships. The
 * response includes comprehensive todo information optimized for list displays,
 * with no unnecessary data transfer.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for todo item
 *   filtering
 * @path /todoList/member/todos
 * @accessor api.functional.todoList.member.todos.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for todo item filtering */
    body: ITodoListTodo.IRequest;
  };
  export type Body = ITodoListTodo.IRequest;
  export type Response = IPageITodoListTodo;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/member/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/member/todos";
  export const random = (): IPageITodoListTodo =>
    typia.random<IPageITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete all todo items for the authenticated member.
 *
 * This operation permanently removes every todo item owned by the authenticated
 * member. Unlike individual item deletion, this is a bulk deletion operation
 * that removes all records from the todo_list_todos table that are linked to
 * the authenticated user's ID. As the Prisma schema does not include any soft
 * delete fields (like deleted_at) on the todo_list_todos model, this is a hard
 * delete - the data is completely and irreversibly removed from the database.
 * There is no recovery mechanism, and no archives are maintained.
 *
 * The operation does not require a request body. It is triggered by the
 * endpoint and applies exclusively to the authenticated user's data, as all
 * todo items in the database are linked to a member via the todo_list_member_id
 * foreign key. The system automatically enforces ownership by only allowing
 * deletion of items belonging to the user associated with the authentication
 * token.
 *
 * This endpoint supports the business rule that users can permanently clear
 * their completed tasks, and extends it to allow clearing all tasks (both
 * active and completed) in a single action. It is used for data clean-up when a
 * user wishes to start over. Given the system's design of single-user, personal
 * task management with no collaboration features, no cascading deletions or
 * orphaned references exist.
 *
 * This delete operation is therefore both simple and absolute -- when executed,
 * it removes every todo item the user has ever created, in compliance with the
 * requirement that data must be stored solely on the user's device and not
 * preserved in any external or recovery-enabled form.
 *
 * @param props.connection
 * @path /todoList/member/todos
 * @accessor api.functional.todoList.member.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(connection: IConnection): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(),
          status: null,
        },
      );
}
export namespace erase {
  export const METADATA = {
    method: "DELETE",
    path: "/todoList/member/todos",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/member/todos";
  export const random = (): void => typia.random<void>();
  export const simulate = (_connection: IConnection): void => {
    return random();
  };
}

/**
 * Retrieve a specific todo item by its unique identifier (UUID). This operation
 * returns complete details about a single task owned by the authenticated user,
 * including the title, status, creation timestamp, and last updated timestamp.
 *
 * The system maintains strict data ownership by validating that the todo item's
 * todo_list_member_id matches the authenticated user's ID before returning any
 * data. If the todo item exists but belongs to a different user, the system
 * returns a 404 Not Found response without disclosing the existence of items
 * owned by other users, implementing a security-by-obscurity principle.
 *
 * The returned todo item includes all fields as defined in the todo_list_todos
 * Prisma schema: id, title, status, created_at, and updated_at. The status
 * field will be either 'active' or 'completed' as specified in the business
 * rules, and the timestamps are stored in Timestamptz format representing
 * Asia/Seoul timezone.
 *
 * This operation is typically used when a user needs to view detailed
 * information about a specific task, such as when navigating to a task detail
 * page from a list view. It supports high-performance database indexing on the
 * combination of todo_list_member_id and id to ensure sub-millisecond response
 * times even with large datasets.
 *
 * No request body is required as all information is provided through the path
 * parameter. The operation conforms strictly to the business rules that define
 * todo item properties and ensures that users can only access their own data.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the target todo item
 * @path /todoList/member/todos/:todoId
 * @accessor api.functional.todoList.member.todos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target todo item */
    todoId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "GET",
    path: "/todoList/member/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/member/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a todo item's title or status.
 *
 * This operation allows an authenticated member to modify the title or status
 * of their specific todo item. The operation validates ownership by ensuring
 * the todo item's todo_list_member_id matches the authenticated user's ID. If
 * the status is being changed, it must toggle between 'active' and 'completed';
 * any other status value is rejected. If the title is being updated, it must be
 * between 1 and 255 non-whitespace characters, and editing is only permitted if
 * the item's status is 'active'. Completed items cannot have their titles
 * edited. Upon successful update, the updated_at timestamp is set to the
 * current date and time in the user's timezone (Asia/Seoul), while the
 * created_at timestamp remains unchanged.
 *
 * Security is enforced through strict ownership validation: if the requested
 * todo item does not belong to the authenticated user, the request is rejected
 * with a 403 Forbidden response. The operation does not support partial
 * updates; the request must include at least one of the fields to update (title
 * or status). If neither is provided, the request is invalid.
 *
 * This operation is essential for personal task management, enabling users to
 * refine their tasks' details or mark completion. It preserves data integrity
 * by preventing editing of completed tasks and ensures users can only modify
 * their own data in compliance with the system's single-user ownership model.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the todo item to update
 * @param props.body Fields to update for the todo item: title (1-255 chars,
 *   non-empty) or status ('active' or 'completed')
 * @path /todoList/member/todos/:todoId
 * @accessor api.functional.todoList.member.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the todo item to update */
    todoId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the todo item: title (1-255 chars, non-empty) or
     * status ('active' or 'completed')
     */
    body: ITodoListTodo.IUpdate;
  };
  export type Body = ITodoListTodo.IUpdate;
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/member/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/member/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
