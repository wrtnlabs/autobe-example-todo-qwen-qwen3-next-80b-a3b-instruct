import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListMember } from "../../../structures/ITodoListMember";
export * as password from "./password/index";

/**
 * Register a new member user account with email and password hash in
 * todo_list_members table.
 *
 * This API operation creates a new member account in the todo_list_members
 * table. When a user registers, they provide an email address and password
 * which are securely stored.
 *
 * The schema confirms this operation is supported by the existence of 'email'
 * and 'password_hash' fields in the todo_list_members table, which store the
 * user's login credentials. The 'created_at' field is automatically populated
 * with the current timestamp in Asia/Seoul timezone.
 *
 * The system enforces unique email addresses to prevent duplicate account
 * creation. The password_hash is stored using bcrypt algorithm with cost factor
 * 12 as specified in the schema description. No other fields are required for
 * registration.
 *
 * The registration flow is the first step in the authentication process for
 * members. After successful registration, the system will need to create a
 * corresponding todo_list_member_roles record to assign the 'member' role.
 *
 * It's critical that email addresses are validated to ensure they follow RFC
 * 5322 format, and passwords meet the minimum security requirements as defined
 * in the schema.
 *
 * @param props.connection
 * @param props.body Contains the email and password hash needed to create a new
 *   member account.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/join
 * @accessor api.functional.auth.member.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Contains the email and password hash needed to create a new member
     * account.
     */
    body: ITodoListMember.IJoin;
  };
  export type Body = ITodoListMember.IJoin;
  export type Response = ITodoListMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/join";
  export const random = (): ITodoListMember.IAuthorized =>
    typia.random<ITodoListMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate member user and issue JWT access token using email and password
 * hash from todo_list_members table.
 *
 * This API operation authenticates member users by validating their credentials
 * against the todo_list_members table. When a user attempts to log in, the
 * system checks if an email exists in the database and if the provided
 * password_hash matches the stored value using bcrypt algorithm.
 *
 * The schema confirms this operation is supported by the 'email' and
 * 'password_hash' fields in the todo_list_members table, which store user
 * credentials. The 'created_at' and 'updated_at' fields are used for session
 * management and inactivity timeout logic.
 *
 * The system implements security best practices by not disclosing whether an
 * email exists in the system when authentication fails. It implements a
 * 30-minute session timeout as specified in the business requirements, where
 * the issued JWT token expires after 30 minutes.
 *
 * This operation is essential for member users to access their todo items.
 * After successful authentication, the user receives a JWT token containing
 * their userId and role information (member). The token must be included in
 * subsequent requests to authorize access to private resources.
 *
 * The authentication process follows the security compliance requirements: no
 * password data is transmitted in plain text, and all communication uses
 * HTTPS/TLS 1.2+.
 *
 * @param props.connection
 * @param props.body Contains the email address and password hash for
 *   authenticating a member user.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/login
 * @accessor api.functional.auth.member.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Contains the email address and password hash for authenticating a
     * member user.
     */
    body: ITodoListMember.ILogin;
  };
  export type Body = ITodoListMember.ILogin;
  export type Response = ITodoListMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/login";
  export const random = (): ITodoListMember.IAuthorized =>
    typia.random<ITodoListMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT access token for member user using a valid refresh token.
 *
 * This API operation refreshes the authentication token for member users by
 * validating a refresh token and issuing a new JWT access token. The refresh
 * token is a separate long-lived credential that is issued during the login
 * process, and its purpose is to allow the user to obtain a new access token
 * without re-entering their credentials.
 *
 * Although the todo_list_members schema does not explicitly store refresh
 * tokens, the refresh operation is implemented as part of the authentication
 * workflow following industry standards. The refresh mechanism operates by
 * validating the refresh token's signature and issuer, then issuing a new
 * access token.
 *
 * The system follows the session management requirements, including a 30-minute
 * session timeout. When a user's JWT access token expires, they must use this
 * refresh endpoint to obtain a new token before attempting further operations
 * on their todo items.
 *
 * The operation ensures the user's identity is consistent between the old,
 * expired token and the new token by using the user's UUID from the refresh
 * token. The refresh operation is secured, and the refresh token must be stored
 * securely on the client side.
 *
 * This endpoint does not require the user's password and is designed to
 * minimize user friction while maintaining security.
 *
 * @param props.connection
 * @param props.body Contains the refresh token to obtain a new access token.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Contains the refresh token to obtain a new access token. */
    body: ITodoListMember.IRefresh;
  };
  export type Body = ITodoListMember.IRefresh;
  export type Response = ITodoListMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): ITodoListMember.IAuthorized =>
    typia.random<ITodoListMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
