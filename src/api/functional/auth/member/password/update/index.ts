import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListMember } from "../../../../../structures/ITodoListMember";

/**
 * Update member user's password in todo_list_members table after validating
 * current password.
 *
 * This API operation enables member users to change their authentication
 * password. The operation requires the user to provide their current password
 * (which is validated against the password_hash in the todo_list_members table)
 * and a new password.
 *
 * The schema confirms this operation is supported by the 'password_hash' field
 * in the todo_list_members table, which stores the bcrypt-hashed password. The
 * operation uses the existing password_hash for validation and replaces it with
 * a new one when the current password is verified.
 *
 * The system implements the security requirements by: hashing the new password
 * with bcrypt algorithm (cost factor 12), ensuring the new password meets
 * minimum requirements (at least 8 characters), and encrypting all
 * communications with HTTPS/TLS 1.2+.
 *
 * This operation is protected by the member authorization role, meaning only
 * authenticated users can change their password. The update also modifies the
 * 'updated_at' timestamp in the todo_list_members table, which helps track
 * security events and informs session management logic (inactivity timeout).
 *
 * The operation prevents unauthorized password changes by requiring knowledge
 * of the current password, following the principle of least privilege.
 *
 * @param props.connection
 * @param props.body Contains current password and new password for updating
 *   member user's credentials.
 * @path /auth/member/password/update
 * @accessor api.functional.auth.member.password.update.updatePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePassword(
  connection: IConnection,
  props: updatePassword.Props,
): Promise<updatePassword.Response> {
  return true === connection.simulate
    ? updatePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePassword.METADATA,
          path: updatePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace updatePassword {
  export type Props = {
    /**
     * Contains current password and new password for updating member user's
     * credentials.
     */
    body: ITodoListMember.IUpdatePassword;
  };
  export type Body = ITodoListMember.IUpdatePassword;
  export type Response = ITodoListMember;

  export const METADATA = {
    method: "PUT",
    path: "/auth/member/password/update",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/update";
  export const random = (): ITodoListMember => typia.random<ITodoListMember>();
  export const simulate = (
    connection: IConnection,
    props: updatePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
