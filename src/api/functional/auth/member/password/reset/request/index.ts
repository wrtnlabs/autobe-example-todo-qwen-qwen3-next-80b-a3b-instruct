import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListMember } from "../../../../../../structures/ITodoListMember";

/**
 * Initiate password reset for member user by generating reset token associated
 * with email in todo_list_members table.
 *
 * This API operation initiates the password reset process for member users by
 * generating a time-limited reset token and bound to the user's email address.
 * The token is stored securely and associated with the user's account in the
 * todo_list_members table.
 *
 * The schema confirms this operation is supported by the 'email' field in the
 * todo_list_members table, which is used to identify the user requesting the
 * password reset. The operation requires a valid, registered email address to
 * prevent abuse.
 *
 * The system implements the security requirements by: using a cryptographically
 * secure random token, binding it to a specific email for 15 minutes, and
 * preventing multiple concurrent reset requests. No password is changed during
 * this operation; it only initiates a reset workflow.
 *
 * After initiating, the user will receive the token via email (handled by an
 * external system not defined in this schema), and will then use the resetToken
 * in a follow-up operation to actually update their password. The operation
 * does not directly modify the password_hash field during reset initiation,
 * maintaining data integrity.
 *
 * The operation supports the business requirement of allowing members to
 * recover access if they forget their password while preventing brute force
 * attacks and email enumeration attacks.
 *
 * @param props.connection
 * @param props.body Contains the email address for which a password reset is
 *   requested.
 * @path /auth/member/password/reset/request
 * @accessor api.functional.auth.member.password.reset.request.requestPasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Contains the email address for which a password reset is requested. */
    body: ITodoListMember.IRequestPasswordReset;
  };
  export type Body = ITodoListMember.IRequestPasswordReset;
  export type Response = ITodoListMember.IResetInitiated;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/password/reset/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/reset/request";
  export const random = (): ITodoListMember.IResetInitiated =>
    typia.random<ITodoListMember.IResetInitiated>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
