import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListMember } from "../../../../../../structures/ITodoListMember";

/**
 * Complete password reset for member user by validating reset token and
 * updating password_hash in todo_list_members table.
 *
 * This API operation completes the password reset process for member users by
 * validating a previously issued reset token and updating the password_hash
 * field in the todo_list_members table with a new password hash.
 *
 * The schema confirms this operation is supported by the 'password_hash' and
 * 'email' fields in the todo_list_members table. The 'email' field identifies
 * the user account, and the 'password_hash' field is updated with the new
 * bcrypt-hashed password.
 *
 * The operation first validates that the reset token is: 1) valid and
 * unexpired; 2) associated with a registered email address; and 3) hasn't been
 * used before. Only after these validations pass is the password_hash updated.
 *
 * The system implements security requirements by: using cryptographically
 * secure tokens with 15-minute expirations, enforcing new password requirements
 * (minimum 8 characters), and hashing the new password with bcrypt (cost factor
 * 12). The operation also updates the 'updated_at' timestamp to record the
 * security event.
 *
 * This is the final step in the password reset workflow, following the
 * requestPasswordReset operation. After successful completion, the user must
 * log in with their new credentials.
 *
 * @param props.connection
 * @param props.body Contains the reset token and new password to complete
 *   password reset process.
 * @path /auth/member/password/reset/complete
 * @accessor api.functional.auth.member.password.reset.complete.completePasswordReset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function completePasswordReset(
  connection: IConnection,
  props: completePasswordReset.Props,
): Promise<completePasswordReset.Response> {
  return true === connection.simulate
    ? completePasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...completePasswordReset.METADATA,
          path: completePasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace completePasswordReset {
  export type Props = {
    /**
     * Contains the reset token and new password to complete password reset
     * process.
     */
    body: ITodoListMember.ICompletePasswordReset;
  };
  export type Body = ITodoListMember.ICompletePasswordReset;
  export type Response = ITodoListMember.IAuthorized;

  export const METADATA = {
    method: "PUT",
    path: "/auth/member/password/reset/complete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/password/reset/complete";
  export const random = (): ITodoListMember.IAuthorized =>
    typia.random<ITodoListMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: completePasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: completePasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
