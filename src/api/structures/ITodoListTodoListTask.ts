import { tags } from "typia";

/**
 * Full representation of a todo task.
 *
 * This type defines the complete structure of a task returned in responses from
 * GET /todos/{id} and POST /todos operations. It includes all fields defined in
 * the todo_list_task table of the Prisma schema: id, title, and is_completed.
 * No additional fields are included since the schema does not contain
 * timestamps, user identifiers, or any metadata. This representation is used
 * when the full task details are required, such as viewing individual tasks or
 * after creation. The type entirely mirrors the database schema with no
 * extensions or modifications.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodoListTask = {
  /**
   * Unique identifier for the todo task.
   *
   * This field contains the system-generated UUID assigned when the task is
   * created. It is managed entirely by the system and should not be provided
   * by clients in any request. The value is stored in the 'id' column of the
   * todo_list_task table in the Prisma schema. This identifier is used for
   * all subsequent operations on the task (update, delete).
   */
  id: string & tags.Format<"uuid">;

  /**
   * The text content of the task.
   *
   * This field represents the user's input for the task. It is stored exactly
   * as validated during creation: stripped of leading/trailing whitespace,
   * truncated to 500 characters if necessary, and preserved as a
   * case-sensitive string. This corresponds directly to the 'title' column in
   * the todo_list_task table.
   *
   * Per the business rules, multiple tasks with identical text exist as
   * distinct records, and case differences are treated as separate tasks.
   */
  title: string;

  /**
   * The completion status of the task.
   *
   * This field indicates whether the task has been marked as completed (true)
   * or is pending (false). It corresponds exactly to the 'is_completed'
   * column in the todo_list_task table in the Prisma schema. The default
   * value is false when a task is created. The status can be toggled between
   * true and false via update operations, but no other status values are
   * permitted.
   *
   * All tasks, regardless of completion status, are always displayed in the
   * list view as per the application's minimal design requirement.
   */
  is_completed: boolean;
};
export namespace ITodoListTodoListTask {
  /**
   * Request body schema for creating a new todo task.
   *
   * This type defines the data format required to add a new task to the
   * system. Per the requirements and Prisma schema, only the task title is
   * accepted in this request. All other fields are system-managed: the 'id'
   * is auto-generated as a UUID, and 'is_completed' defaults to false. No
   * user identifiers, timestamps, or metadata fields are permitted in this
   * request since they are not part of the Prisma schema and would violate
   * the single-user, non-authenticating design principle.
   */
  export type ICreate = {
    /**
     * The text content of the task.
     *
     * This field represents the user's input for a new todo item. Must
     * contain at least one non-whitespace character. Leading and trailing
     * whitespace is removed before storage, but internal whitespace is
     * preserved. The value is truncated to 500 characters if longer, as
     * specified in the Prisma schema description.
     *
     * Per the business rules, empty strings, only whitespace, or Unicode
     * whitespace-only strings are rejected. The system treats task text as
     * case-sensitive, so "Buy milk" and "buy MILK" are considered
     * distinct.
     *
     * This field corresponds exactly to the 'title' column in the
     * todo_list_task table in the Prisma schema, and no other fields from
     * the entity can be included in this create operation.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<500>;
  };

  /**
   * Request body schema for updating the completion status of a todo task.
   *
   * This type defines the data format accepted by the PATCH /todos/{id}
   * operation. Per the Prisma schema and business rules, only the
   * is_completed field can be modified on an existing task. The id and title
   * fields are immutable and cannot be changed via update requests. All
   * operations must be based on the system-generated id.
   *
   * This form follows the Partial<T> pattern, as only one mutable field is
   * permitted in the schema. The request body must contain exactly one
   * property: is_completed. The system ignores requests that do not contain
   * this property, or that contain other properties, to maintain strict
   * schema compliance.
   */
  export type IUpdate = {
    /**
     * Target completion status to toggle the task to.
     *
     * This field specifies the desired state for the task's completion
     * status. The system will toggle the current value: if the task is
     * currently incomplete (false), setting this to true will mark it as
     * completed; if currently completed (true), setting this to false will
     * mark it as incomplete.
     *
     * This field maps directly to the 'is_completed' column in the
     * todo_list_task table of the Prisma schema. No other properties can be
     * modified via this update operation, as the Prisma schema only allows
     * the is_completed field to be changed, and the title and id are
     * immutable. The client must provide the exact target state, not a
     * toggle instruction.
     */
    is_completed: boolean;
  };
}
