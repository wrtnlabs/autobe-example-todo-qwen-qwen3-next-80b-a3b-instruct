import { tags } from "typia";

/**
 * Todo items owned by members. Each todo represents a personal task that can be
 * toggled between active and completed states.
 *
 * This model is primary as users directly manage these items independently
 * through creation, editing, status toggling, and deletion operations.
 *
 * All todo items are owned by a single member via the todo_list_member_id
 * foreign key, ensuring strict data ownership.
 *
 * The system prevents users from seeing, modifying, or even knowing about todo
 * items belonging to other users.
 *
 * The title field must be 1-255 characters, non-empty, and non-whitespace only,
 * as defined by business rules.
 *
 * The status field can only be 'active' or 'completed', representing the
 * lifecycle of the todo.
 *
 * Creation timestamp is immutable. Update timestamp changes on any
 * modification.
 *
 * No soft delete capability exists in this model - deletion is permanent and
 * irreversible.
 *
 * This entity represents the core data model for the personal task management
 * application.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * Primary Key.
   *
   * Unique identifier for the todo item.
   *
   * This UUID is generated by the system upon creation and is used as the
   * primary reference for all operations involving this todo item.
   *
   * The ID is immutable and persists for the lifetime of the todo item, even
   * if other properties like title or status are changed.
   *
   * This field is critical for establishing data ownership, as each todo item
   * is linked to a member via the todo_list_member_id foreign key in the
   * todo_list_members table.
   *
   * All CRUD operations on todo items require this id as a path parameter to
   * identify the exact item being modified.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owner of this todo item. {@link todo_list_members.id}.
   *
   * This field establishes the data ownership relationship between the todo
   * item and the member account.
   *
   * It is a foreign key that references the id field in the todo_list_members
   * table.
   *
   * Every todo item must belong to exactly one member, and the system
   * enforces that only the authenticated member can access or modify their
   * own todo items.
   *
   * This field is automatically populated by the system during creation using
   * the authenticated user's ID, ensuring strict data ownership.
   *
   * Any attempt to create or update a todo item with a todo_list_member_id
   * that does not match the authenticated user's ID results in a 403
   * Forbidden response.
   */
  todo_list_member_id: string & tags.Format<"uuid">;

  /**
   * The task title. Must be 1-255 characters, non-empty, non-whitespace only.
   *
   * Preserves internal whitespace but trims leading/trailing spaces.
   *
   * This field represents the primary content of the todo item, the user's
   * task description.
   *
   * The system enforces the business rule that the title must be between 1
   * and 255 characters and cannot be empty or consist solely of whitespace.
   *
   * When a user submits a title with leading/trailing whitespace, the system
   * trims it before storage, but preserves all internal whitespace.
   *
   * This field is indexed for full-text search using PostgreSQL trigram
   * operations (gin_trgm_ops) to enable real-time partial matching.
   *
   * The title is the only editable field for active todos; once status is set
   * to 'completed', the title is frozen and cannot be modified.
   */
  title: string & tags.MinLength<1> & tags.MaxLength<255>;

  /**
   * Current state of the todo item. Must be exactly 'active' or 'completed'.
   *
   * Newly created items have 'active' status. Title cannot be edited when
   * status is 'completed'.
   *
   * This field represents the lifecycle state of the todo item and is central
   * to its behavior.
   *
   * The system restricts allowed values to only 'active' and 'completed',
   * preventing invalid states.
   *
   * When the status is 'active', the item is displayed in the task list and
   * the user can edit its title.
   *
   * When the status is 'completed', the item is moved to the completed
   * section and the title becomes read-only.
   *
   * The status can be toggled back and forth between active and completed,
   * but no other values are allowed.
   *
   * The system updates the updated_at timestamp whenever this field is
   * changed.
   */
  status: "active" | "completed";

  /**
   * Timestamp when the todo item was created. Always set to current time in
   * Asia/Seoul timezone upon creation. Never modified.
   *
   * Records the exact date and time (in Asia/Seoul timezone) when the todo
   * item was first created in the system.
   *
   * This timestamp is set once at item creation and never modified, even if
   * the item's title or status is later changed.
   *
   * The value is stored in Timestamptz format in the database and is always
   * converted to UTC for internal processing, then displayed in Asia/Seoul
   * timezone to the user.
   *
   * This field is used to sort todo items in descending order (newest first)
   * as required by the business rules.
   *
   * It is indexed on (todo_list_member_id, created_at) for efficient
   * retrieval of a user's todo items by creation date.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the todo item was last modified (title updated or status
   * toggled). Always updated on changes. Not set on creation.
   *
   * Records the date and time of the most recent modification to the todo
   * item.
   *
   * This timestamp is automatically updated whenever the title or status is
   * changed.
   *
   * When the todo item is first created, updated_at is set to the same value
   * as created_at.
   *
   * Subsequent updates to title or status trigger an update to updated_at to
   * reflect the latest change.
   *
   * This field helps display the most recently modified items at the top of
   * lists.
   *
   * The timestamp is stored in Timestamptz format in the database and
   * represents Asia/Seoul timezone in display contexts.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListTodo {
  /**
   * Request body for creating a new todo item.
   *
   * This type represents the information required to create a new todo item
   * for the authenticated member.
   *
   * The system requires only the title field for creation. This ensures that
   * clients cannot set or manipulate other fields like id, created_at,
   * updated_at, or todo_list_member_id.
   *
   * The todo_list_member_id is automatically assigned to the authenticated
   * user's ID, enforcing strict data ownership.
   *
   * The status field is automatically set to 'active' upon creation.
   *
   * The created_at and updated_at fields are automatically set to the current
   * date and time (Asia/Seoul timezone).
   *
   * The system validates the title field: it must be between 1 and 255
   * characters and cannot be empty or contain only whitespace.
   *
   * If the validation fails, the system returns a 400 Bad Request without
   * creating any database record.
   */
  export type ICreate = {
    /**
     * The task title. Must be 1-255 characters, non-empty, non-whitespace
     * only.
     *
     * Preserves internal whitespace but trims leading/trailing spaces.
     *
     * This field represents the primary content of the todo item, the
     * user's task description.
     *
     * The system enforces the business rule that the title must be between
     * 1 and 255 characters and cannot be empty or consist solely of
     * whitespace.
     *
     * When a user submits a title with leading/trailing whitespace, the
     * system trims it before storage, but preserves all internal
     * whitespace.
     *
     * This field is indexed for full-text search using PostgreSQL trigram
     * operations (gin_trgm_ops) to enable real-time partial matching.
     *
     * The title is the only editable field for active todos; once status is
     * set to 'completed', the title becomes frozen and cannot be modified.
     *
     * This is the only field required in this request type. All other
     * fields (id, todo_list_member_id, status, created_at, updated_at) are
     * auto-generated by the system and must not be provided by the client.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<255>;
  };

  /**
   * Request body for updating a todo item's title or status.
   *
   * This type represents the information required to modify an existing todo
   * item.
   *
   * It allows for partial updates - either title, status, or both can be
   * provided.
   *
   * If neither field is provided, the request is invalid (400 Bad Request).
   *
   * The system enforces business rules:
   *
   * - Title must be 1-255 characters and non-empty
   * - Status must be either 'active' or 'completed'
   * - Title cannot be updated if status is 'completed'
   * - Untouched fields remain unchanged
   *
   * The todo_list_member_id is not allowed in this request type, as it's
   * immutable and always enforced by authentication context.
   *
   * The id is provided via the path parameter, not request body, to avoid
   * parameter tampering.
   *
   * This request type supports the update workflow for users who need to edit
   * task titles or toggle completion status, following the principle of least
   * privilege by completely excluding the owner ID from client input.
   */
  export type IUpdate = {
    /**
     * The task title. Must be 1-255 characters, non-empty, non-whitespace
     * only.
     *
     * Preserves internal whitespace but trims leading/trailing spaces.
     *
     * This field represents the primary content of the todo item, the
     * user's task description.
     *
     * The system enforces the business rule that the title must be between
     * 1 and 255 characters and cannot be empty or consist solely of
     * whitespace.
     *
     * When a user submits a title with leading/trailing whitespace, the
     * system trims it before storage, but preserves all internal
     * whitespace.
     *
     * This field is indexed for full-text search using PostgreSQL trigram
     * operations (gin_trgm_ops) to enable real-time partial matching.
     *
     * The title is the only editable field for active todos; once status is
     * set to 'completed', the title becomes frozen and cannot be modified.
     *
     * This field may be included to update the title of the todo item. If
     * included, the new value must meet the length and content
     * constraints.
     *
     * If this field is provided and the todo item's status is 'completed',
     * the system will reject the update with a 403 Forbidden response.
     */
    title?: (string & tags.MinLength<1> & tags.MaxLength<255>) | undefined;

    /**
     * Current state of the todo item. Must be exactly 'active' or
     * 'completed'.
     *
     * Newly created items have 'active' status. Title cannot be edited when
     * status is 'completed'.
     *
     * This field represents the lifecycle state of the todo item and is
     * central to its behavior.
     *
     * The system restricts allowed values to only 'active' and 'completed',
     * preventing invalid states.
     *
     * When the status is 'active', the item is displayed in the task list
     * and the user can edit its title.
     *
     * When the status is 'completed', the item is moved to the completed
     * section and the title becomes read-only.
     *
     * The status can be toggled back and forth between active and
     * completed, but no other values are allowed.
     *
     * This field may be included to toggle the status of the todo item. If
     * provided, the system will validate that the new status is valid and
     * perform the transition.
     *
     * If this field is set to 'completed' and the item was active, the
     * status is changed and updated_at is updated.
     *
     * If this field is set to 'active' and the item was completed, the
     * status is changed and updated_at is updated.
     */
    status?: "active" | "completed" | undefined;
  };

  /**
   * Search and filtering parameters for retrieving todo items.
   *
   * This type represents the body of a search request that allows users to
   * filter, order, and paginate their todo items.
   *
   * The parameters are all optional except for the requirement that at least
   * one must be provided if the request body exists (though in practice, the
   * ID parameter is given in the path).
   *
   * Multiple filters can be combined - for example, a user can search for
   * 'meeting' with status:'active' and sort by updated_at:desc.
   *
   * Page and limit are used together to enable pagination.
   *
   * The search uses trigram matching for efficient fuzzy text searching on
   * titles.
   *
   * Date filtering uses ISO 8601 timestamps (UTC) which are converted to
   * Asia/Seoul for comparison.
   *
   * This flexible interface enables the user interface to implement advanced
   * filtering controls while maintaining simple, safe API boundaries.
   */
  export type IRequest = {
    /**
     * Partial text search term to match against task titles.
     *
     * Performs fuzzy matching using PostgreSQL trigram operations
     * (gin_trgm_ops) for efficient substring matching.
     *
     * The search term can be any substring within the title. For example:
     * searching for 'work' will match 'Work project', 'Work from home',
     * etc.
     *
     * This field supports user-friendly discovery of tasks among
     * potentially hundreds of entries.
     *
     * The maximum length is limited to 100 characters to prevent expensive
     * or malicious search queries.
     *
     * The search is case-insensitive and works regardless of spacing or
     * punctuation.
     *
     * This field is optional - if not provided, all task titles are
     * considered matching.
     */
    search?: (string & tags.MaxLength<100>) | undefined;

    /**
     * Filter todo items by their current state.
     *
     * Allows users to view only active tasks, only completed tasks, or both
     * (default).
     *
     * When this field is provided, the system filters the results to
     * include only todo items with the specified status.
     *
     * If not provided, the query returns all todo items regardless of
     * status.
     *
     * This filter is implemented with an efficient index on (status,
     * todo_list_member_id) to ensure fast filtering.
     *
     * Only 'active' and 'completed' values are allowed, consistent with the
     * business rules.
     */
    status?: "active" | "completed" | undefined;

    /**
     * Filter tasks created after a specific date and time (UTC).
     *
     * Timestamp must be given in ISO 8601 format (e.g.,
     * '2023-05-15T10:30:00Z').
     *
     * The system converts this value to Asia/Seoul timezone for comparison
     * against the created_at field.
     *
     * This filter allows users to retrieve tasks created after a specific
     * date, useful for reviewing recent additions or restarting a project.
     *
     * This filter is optional. If omitted, there is no lower bound on
     * creation date.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter tasks created before a specific date and time (UTC).
     *
     * Timestamp must be given in ISO 8601 format (e.g.,
     * '2023-05-15T10:30:00Z').
     *
     * The system converts this value to Asia/Seoul timezone for comparison
     * against the created_at field.
     *
     * This filter allows users to retrieve tasks created before a specific
     * date, useful for reviewing historical tasks or archiving older
     * items.
     *
     * This filter is optional. If omitted, there is no upper bound on
     * creation date.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * The field used to sort the results.
     *
     * Specifies whether results should be sorted by creation time
     * ('created_at') or last update time ('updated_at').
     *
     * Default value is 'created_at' if this parameter is not provided.
     *
     * This filter helps users organize their list according to their
     * preference: newest first by creation or by last modification.
     */
    sort?: "created_at" | "updated_at" | undefined;

    /**
     * The direction of sorting.
     *
     * Specifies whether the results should be in ascending ('asc') or
     * descending ('desc') order.
     *
     * Default value is 'desc' (newest first) if this parameter is not
     * provided.
     *
     * This allows users to reverse the ordering when desired - for example,
     * to see oldest tasks first by combining sort:'created_at' with
     * order:'asc'.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Page number for pagination.
     *
     * Specifies which page of results should be returned when using
     * pagination.
     *
     * Page numbers start at 1 (not 0).
     *
     * Maximum page number is 1000 to prevent excessive memory usage.
     *
     * This parameter works in conjunction with the limit parameter to
     * enable navigation through large result sets.
     *
     * If omitted, page defaults to 1 (first page).
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>)
      | undefined;

    /**
     * Number of results per page in pagination.
     *
     * Specifies how many tasks to return per page.
     *
     * Minimum is 1 task, maximum is 200 tasks to prevent excessive response
     * size and processing time.
     *
     * Default value is 20 if omitted.
     *
     * This parameter enables efficient client-side rendering of task lists
     * without loading all items at once.
     *
     * The value directly impacts how much data is transferred in each API
     * request.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;
  };

  /**
   * Summary representation of a todo item for display in lists.
   *
   * This type represents a lightweight version of the todo item, optimized
   * for display in lists and search results.
   *
   * Unlike the full ITodoListTodo type, this summary version is intentionally
   * complete for human-readable display - it includes all necessary
   * information to render a task item.
   *
   * It excludes no fields from the full entity, as all fields (id, title,
   * status, created_at, updated_at) are relevant and safe for display.
   *
   * Each field is described in detail as it appears in the full entity.
   *
   * This type is used by the search operation and other endpoints returning
   * lists of todo items.
   *
   * Note: Although this is called a 'summary', it includes all fields as none
   * of them are sensitive or need to be excluded in a personal task
   * management system.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique identifier for the todo item.
     *
     * This UUID is generated by the system upon creation and is used as the
     * primary reference for all operations involving this todo item.
     *
     * The ID is immutable and persists for the lifetime of the todo item,
     * even if other properties like title or status are changed.
     *
     * This field is critical for establishing data ownership, as each todo
     * item is linked to a member via the todo_list_member_id foreign key in
     * the todo_list_members table.
     *
     * All CRUD operations on todo items require this id as a path parameter
     * to identify the exact item being modified.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The task title. Must be 1-255 characters, non-empty, non-whitespace
     * only.
     *
     * Preserves internal whitespace but trims leading/trailing spaces.
     *
     * This field represents the primary content of the todo item, the
     * user's task description.
     *
     * The system enforces the business rule that the title must be between
     * 1 and 255 characters and cannot be empty or consist solely of
     * whitespace.
     *
     * When a user submits a title with leading/trailing whitespace, the
     * system trims it before storage, but preserves all internal
     * whitespace.
     *
     * This field is indexed for full-text search using PostgreSQL trigram
     * operations (gin_trgm_ops) to enable real-time partial matching.
     *
     * The title is the only editable field for active todos; once status is
     * set to 'completed', the title becomes frozen and cannot be modified.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<255>;

    /**
     * Current state of the todo item. Must be exactly 'active' or
     * 'completed'.
     *
     * Newly created items have 'active' status. Title cannot be edited when
     * status is 'completed'.
     *
     * This field represents the lifecycle state of the todo item and is
     * central to its behavior.
     *
     * The system restricts allowed values to only 'active' and 'completed',
     * preventing invalid states.
     *
     * When the status is 'active', the item is displayed in the task list
     * and the user can edit its title.
     *
     * When the status is 'completed', the item is moved to the completed
     * section and the title becomes read-only.
     *
     * The status can be toggled back and forth between active and
     * completed, but no other values are allowed.
     *
     * The system updates the updated_at timestamp whenever this field is
     * changed.
     */
    status: "active" | "completed";

    /**
     * Timestamp when the todo item was created. Always set to current time
     * in Asia/Seoul timezone upon creation. Never modified.
     *
     * Records the exact date and time (in Asia/Seoul timezone) when the
     * todo item was first created in the system.
     *
     * This timestamp is set once at item creation and never modified, even
     * if the item's title or status is later changed.
     *
     * The value is stored in Timestamptz format in the database and is
     * always converted to UTC for internal processing, then displayed in
     * Asia/Seoul timezone to the user.
     *
     * This field is used to sort todo items in descending order (newest
     * first) as required by the business rules.
     *
     * It is indexed on (todo_list_member_id, created_at) for efficient
     * retrieval of a user's todo items by creation date.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the todo item was last modified (title updated or
     * status toggled). Always updated on changes. Not set on creation.
     *
     * Records the date and time of the most recent modification to the todo
     * item.
     *
     * This timestamp is automatically updated whenever the title or status
     * is changed.
     *
     * When the todo item is first created, updated_at is set to the same
     * value as created_at.
     *
     * Subsequent updates to title or status trigger an update to updated_at
     * to reflect the latest change.
     *
     * This field helps display the most recently modified items at the top
     * of lists.
     *
     * The timestamp is stored in Timestamptz format in the database and
     * represents Asia/Seoul timezone in display contexts.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
