import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Stores authentication credentials and identity information for todo list
 * users. Each member has a unique email and hashed password for secure login.
 *
 * This model represents the primary user entity in the system with a single
 * role ("member").
 *
 * The system uses this model to authenticate users and establish data ownership
 * for todo items.
 *
 * All member accounts must have a unique email and a securely hashed password.
 *
 * The created_at and updated_at timestamps enable lifecycle tracking of
 * accounts.
 *
 * The deleted_at field implements soft deletion, allowing for account recovery
 * before permanent removal.
 *
 * This entity is the foundation for all authentication, authorization, and user
 * data ownership in the system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListMember = {
  /**
   * Primary Key.
   *
   * Unique identifier for the member account.
   *
   * This UUID is generated by the system and serves as the primary reference
   * for all operations involving this member.
   *
   * The ID is immutable and persists for the lifetime of the account, used to
   * establish relationships with todo_list_member_roles and todo_list_todos
   * tables.
   *
   * All operations enforce data ownership by matching this id with the
   * authenticated user's ID from the JWT token.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's email address used for authentication. Must be unique across the
   * system.
   *
   * This field stores the email address that members use to log in to the
   * application.
   *
   * The system enforces uniqueness at the database level to prevent duplicate
   * accounts.
   *
   * Email addresses must follow RFC 5322 format for standard email
   * validation.
   *
   * This field is required for authentication and is never displayed to other
   * users for privacy reasons.
   *
   * The system implements security best practices by never revealing in error
   * messages whether a provided email exists in the system.
   */
  email: string & tags.Format<"email">;

  /**
   * Hashed password using bcrypt algorithm with cost factor 12. Never stores
   * plain text passwords.
   *
   * This field stores the result of securely hashing the member's password
   * using the bcrypt algorithm with a cost factor of 12.
   *
   * The system never stores, transmits, or logs plain text passwords.
   *
   * When a member registers or updates their password, the system hashes the
   * provided password with a unique salt and stores only the resulting hash.
   *
   * During authentication, the system hashes the provided password with the
   * same salt and compares the result against this stored hash.
   *
   * The bcrypt implementation ensures resistance to brute force attacks and
   * rainbow table attacks.
   */
  password_hash: string;

  /**
   * Timestamp when this user account was created.
   *
   * Records the exact date and time (in Asia/Seoul timezone) when the member
   * account was created in the system.
   *
   * This timestamp is set once at account creation and never modified.
   *
   * The value is stored in Timestamptz format in the database and is always
   * converted to UTC for internal processing, then displayed in Asia/Seoul
   * timezone to the user.
   *
   * This field is used for account age analysis and lifecycle management.
   *
   * It is indexed to optimize query performance for account-related
   * operations.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this user account was last updated.
   *
   * Records the date and time of the most recent modification to the member
   * account.
   *
   * This timestamp is automatically updated whenever the member's email or
   * password_hash is changed.
   *
   * It helps track security events and informs session management logic
   * (inactivity timeout).
   *
   * The timestamp is stored in Timestamptz format in the database and
   * represents Asia/Seoul timezone in display contexts.
   *
   * It is indexed to optimize query performance for account-related
   * operations.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp. If null, account is active; if set, account is
   * logically deleted.
   *
   * This field implements soft deletion for member accounts, allowing for
   * account recovery if needed.
   *
   * When an account is deleted, this field is set to the current date and
   * time, effectively hiding the account from regular queries.
   *
   * The account can still be recovered by nulling this field before the
   * account is permanently purged from the system.
   *
   * During authentication, the system checks this field and rejects login
   * attempts for accounts where deleted_at is not null.
   *
   * This field is indexed to optimize soft deletion queries.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace ITodoListMember {
  /**
   * Request body for user registration (join) operation.
   *
   * This type represents the information required to create a new member
   * account.
   *
   * The system requires only the email address and password hash for
   * registration.
   *
   * The password_hash is already hashed using bcrypt algorithm with cost
   * factor 12 before being sent to the server.
   *
   * The system validates the email format and ensures the email is not
   * already registered.
   *
   * All other fields (id, created_at, updated_at, deleted_at) are
   * auto-generated by the system and must not be provided by the client.
   *
   * This request type implements the join operation for new users to create
   * an account in the todo_list_members table.
   */
  export type IJoin = {
    /**
     * User's email address used for authentication. Must be unique across
     * the system.
     *
     * This field stores the email address that members use to register for
     * the application.
     *
     * The system enforces uniqueness at the database level to prevent
     * duplicate accounts.
     *
     * Email addresses must follow RFC 5322 format for standard email
     * validation.
     *
     * When a user registers, the system validates this email and creates a
     * new account with this address.
     */
    email: string & tags.Format<"email">;

    /**
     * Hashed password using bcrypt algorithm with cost factor 12. Never
     * stores plain text passwords.
     *
     * This field stores the result of securely hashing the member's
     * password using the bcrypt algorithm with a cost factor of 12.
     *
     * The system never stores, transmits, or logs plain text passwords.
     *
     * During registration, the system hashes the provided password with a
     * unique salt and stores only the resulting hash.
     *
     * The bcrypt implementation ensures resistance to brute force attacks
     * and rainbow table attacks.
     *
     * The password must meet minimum security requirements (at least 8
     * characters) before hashing.
     */
    password_hash: string;
  };

  /**
   * Authorization response containing JWT token.
   *
   * This response is returned after successful authentication operations such
   * as login, join, or token refresh.
   *
   * The response format follows the standardized I{RoleName}.IAuthorized
   * pattern for authentication responses.
   *
   * The id field contains the authenticated member's unique identifier.
   *
   * The token field contains the JWT authentication token referencing the
   * IAuthorizationToken type.
   *
   * This structure enables complete JWT token lifecycle management with
   * proper expiration and refresh mechanisms.
   *
   * No other user data is included in this response to minimize exposure and
   * follow the principle of least privilege.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated member.
     *
     * This UUID is extracted from the JWT token and identifies the member
     * account.
     *
     * The system matches this ID with the todo_list_members table to
     * establish data ownership for all subsequent operations.
     *
     * The ID is immutable and persists for the lifetime of the account.
     *
     * This field is required in all authorization responses to identify the
     * authenticated user and enable proper data filtering.
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body for member user authentication (login) operation.
   *
   * This type represents the authentication credentials required to log in to
   * the system.
   *
   * The system requires only the email address and password hash for
   * authentication.
   *
   * The password_hash is already hashed using bcrypt algorithm with cost
   * factor 12 before being sent to the server.
   *
   * The system validates the credentials against the todo_list_members table.
   *
   * If the email exists but the password hash doesn't match, the system
   * returns a generic "Invalid email or password" error without revealing
   * which one is incorrect.
   *
   * All other fields (id, created_at, updated_at, deleted_at) are managed by
   * the system and must not be provided by the client.
   *
   * This request type implements the login operation for existing users to
   * obtain a JWT access token.
   */
  export type ILogin = {
    /**
     * User's email address used for authentication. Must be unique across
     * the system.
     *
     * This field stores the email address that members use to log in to the
     * application.
     *
     * The system uses this field to locate the account in the
     * todo_list_members table.
     *
     * Email addresses must follow RFC 5322 format for standard email
     * validation.
     *
     * The system implements security best practices by never revealing in
     * error messages whether a provided email exists in the system.
     */
    email: string & tags.Format<"email">;

    /**
     * Hashed password using bcrypt algorithm with cost factor 12. Never
     * stores plain text passwords.
     *
     * This field stores the result of securely hashing the member's
     * password using the bcrypt algorithm with a cost factor 12.
     *
     * The system never stores, transmits, or logs plain text passwords.
     *
     * During login, the system hashes the provided password with the same
     * salt as stored in the database and compares the result against the
     * stored hash.
     *
     * The bcrypt implementation ensures resistance to brute force attacks
     * and rainbow table attacks.
     *
     * The password_mask field is not used because passwords are not sent as
     * plain text.
     */
    password_hash: string;
  };

  /**
   * Request body for authentication token refresh operation.
   *
   * This type represents the refresh token needed to obtain a new JWT access
   * token after the current one expires.
   *
   * The refresh token is a long-lived credential that is issued during the
   * initial login process.
   *
   * The system validates the refresh token's signature, issuer, and
   * expiration before issuing a new access token.
   *
   * The refresh token is single-use - after being used to obtain a new access
   * token, it is invalidated and a new refresh token is issued.
   *
   * This mechanism allows users to remain authenticated without re-entering
   * credentials frequently while maintaining security through token
   * rotation.
   *
   * The refresh operation does not require the user's password or email,
   * minimizing exposure of sensitive credentials.
   */
  export type IRefresh = {
    /**
     * Long-lived refresh token used to obtain a new JWT access token.
     *
     * This token is issued during the login process and has a longer
     * expiration time (typically 7 days) than the access token (30
     * minutes).
     *
     * The refresh token is stored securely on the client side and sent with
     * each refresh request.
     *
     * The system validates the refresh token's signature, issuer, and
     * expiration before issuing a new access token.
     *
     * Refresh tokens are single-use - after being used to obtain a new
     * access token, the old refresh token is invalidated and a new one is
     * issued.
     *
     * This mechanism allows users to maintain authentication without
     * re-entering credentials while still providing a way to revoke access
     * through token invalidation.
     */
    refresh_token: string;
  };

  /**
   * Request body for member password update operation.
   *
   * This type represents the credentials required to change a member's
   * password.
   *
   * The system requires both the current password hash and the new password
   * hash for security.
   *
   * The current_password_hash is validated against the stored password_hash
   * in the todo_list_members table.
   *
   * The new_password_hash is checked for minimum security requirements (at
   * least 8 characters) before being stored.
   *
   * Both passwords are hashed using bcrypt with cost factor 12 to prevent
   * exposure of plain text passwords.
   *
   * This process ensures that only the user who knows the current password
   * can change it.
   *
   * After successful update, the system updates the updated_at timestamp in
   * the todo_list_members table.
   */
  export type IUpdatePassword = {
    /**
     * Current password hash for validating the user's identity.
     *
     * This field contains the bcrypt-hashed version of the user's current
     * password.
     *
     * The system validates this against the stored password_hash in the
     * todo_list_members table before allowing password changes.
     *
     * This prevents unauthorized password changes by ensuring the user
     * knows their current password.
     *
     * The password is never sent as plain text; it is always hashed using
     * bcrypt with cost factor 12 before transmission.
     */
    current_password_hash: string;

    /**
     * New password hash to replace the current one.
     *
     * This field contains the bcrypt-hashed version of the new password the
     * user wants to use.
     *
     * The system validates that the new password meets minimum security
     * requirements (at least 8 characters) before hashing.
     *
     * The bcrypt implementation uses cost factor 12 to ensure resistance to
     * brute force attacks.
     *
     * After successful validation, the system updates the password_hash
     * field in the todo_list_members table with this value and updates the
     * updated_at timestamp.
     */
    new_password_hash: string;
  };

  /**
   * Request body for initiating password reset process.
   *
   * This type represents the email address used to initiate the password
   * reset workflow.
   *
   * The system generates a cryptographically secure reset token bound to the
   * provided email address.
   *
   * The reset token has a 15-minute expiration and is stored in the system's
   * secure token store.
   *
   * The system implements security best practices by not disclosing whether
   * the email exists in the database.
   *
   * The original request does not modify any data in todo_list_members table.
   *
   * After initiating this request, the user would typically receive the reset
   * token via email through an external system not defined in this schema.
   */
  export type IRequestPasswordReset = {
    /**
     * User's email address used for password reset request.
     *
     * This field specifies which member account requests a password reset.
     *
     * The system validates that the email exists in the todo_list_members
     * table.
     *
     * For security purposes, the system never discloses whether the email
     * exists - if invalid, it returns a generic success message.
     *
     * Due to system architecture constraints, no email delivery system is
     * implemented in this schema, so this operation only generates a reset
     * token without external communication.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Response body for password reset initiation operation.
   *
   * This type represents the confirmation message after a password reset has
   * been successfully initiated.
   *
   * The system returns this confirmation regardless of whether the email
   * exists in the database for security purposes.
   *
   * This response confirms to the client that the request was processed but
   * does not reveal any information about the existence of the account.
   *
   * The actual reset token is generated and stored securely by the system but
   * is not included in this response because it is intended to be delivered
   * to the user via email through an external system not defined in this
   * schema.
   *
   * The response structure matches the request email to maintain consistency
   * and provide audit trail.
   */
  export type IResetInitiated = {
    /**
     * User's email address for which password reset was initiated.
     *
     * This field confirms the email address associated with the password
     * reset request.
     *
     * The system does not reveal whether this email exists in the database
     * for security purposes, even though the reset has been initiated.
     *
     * This representation ensures that the response matches the request for
     * audit trail purposes.
     *
     * The reset token is generated and stored securely but not included in
     * this response for security reasons as it is intended to be delivered
     * via email through an external system not defined in this schema.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Request body for completing password reset process.
   *
   * This type represents the credentials required to finalize a password
   * reset.
   *
   * The system requires both the reset_token and new_password_hash to
   * complete the process.
   *
   * The reset_token is validated to ensure it is valid, unexpired, and not
   * previously used.
   *
   * The new_password_hash is checked for minimum security requirements (at
   * least 8 characters) before being stored.
   *
   * Both fields are required for security - the reset_token proves identity
   * without knowing the current password and the new_password_hash sets the
   * new credential.
   *
   * After successful validation, the system updates the password_hash field
   * in the todo_list_members table and the updated_at timestamp, then issues
   * a new JWT access token.
   */
  export type ICompletePasswordReset = {
    /**
     * Cryptographically secure token issued during password reset
     * initiation.
     *
     * This token is a short-lived, one-time-use credential that
     * authenticates the password reset request.
     *
     * The token is bound to a specific email address and expires after 15
     * minutes.
     *
     * The system validates that the token is: 1) valid and unexpired; 2)
     * associated with a registered email address; and 3) hasn't been used
     * before.
     *
     * After successful validation, the system updates the password_hash
     * field in the todo_list_members table with the new password hash.
     */
    reset_token: string;

    /**
     * New password hash to replace the current one.
     *
     * This field contains the bcrypt-hashed version of the new password the
     * user wants to use.
     *
     * The system validates that the new password meets minimum security
     * requirements (at least 8 characters) before hashing.
     *
     * The bcrypt implementation uses cost factor 12 to ensure resistance to
     * brute force attacks.
     *
     * After successful validation, the system updates the password_hash
     * field in the todo_list_members table with this value and updates the
     * updated_at timestamp.
     */
    new_password_hash: string;
  };
}
