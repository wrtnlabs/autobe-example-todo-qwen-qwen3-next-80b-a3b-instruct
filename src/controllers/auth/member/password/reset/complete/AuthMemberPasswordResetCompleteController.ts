import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putauthMemberPasswordResetComplete } from "../../../../../../providers/putauthMemberPasswordResetComplete";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

import { ITodoListMember } from "../../../../../../api/structures/ITodoListMember";

@Controller("/auth/member/password/reset/complete")
export class AuthMemberPasswordResetCompleteController {
  /**
   * Complete password reset for member user by validating reset token and
   * updating password_hash in todo_list_members table.
   *
   * This API operation completes the password reset process for member users by
   * validating a previously issued reset token and updating the password_hash
   * field in the todo_list_members table with a new password hash.
   *
   * The schema confirms this operation is supported by the 'password_hash' and
   * 'email' fields in the todo_list_members table. The 'email' field identifies
   * the user account, and the 'password_hash' field is updated with the new
   * bcrypt-hashed password.
   *
   * The operation first validates that the reset token is: 1) valid and
   * unexpired; 2) associated with a registered email address; and 3) hasn't
   * been used before. Only after these validations pass is the password_hash
   * updated.
   *
   * The system implements security requirements by: using cryptographically
   * secure tokens with 15-minute expirations, enforcing new password
   * requirements (minimum 8 characters), and hashing the new password with
   * bcrypt (cost factor 12). The operation also updates the 'updated_at'
   * timestamp to record the security event.
   *
   * This is the final step in the password reset workflow, following the
   * requestPasswordReset operation. After successful completion, the user must
   * log in with their new credentials.
   *
   * @param connection
   * @param body Contains the reset token and new password to complete password
   *   reset process.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async completePasswordReset(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ITodoListMember.ICompletePasswordReset,
  ): Promise<ITodoListMember.IAuthorized> {
    try {
      return await putauthMemberPasswordResetComplete({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
