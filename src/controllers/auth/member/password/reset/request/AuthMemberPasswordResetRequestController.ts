import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthMemberPasswordResetRequest } from "../../../../../../providers/postauthMemberPasswordResetRequest";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

import { ITodoListMember } from "../../../../../../api/structures/ITodoListMember";

@Controller("/auth/member/password/reset/request")
export class AuthMemberPasswordResetRequestController {
  /**
   * Initiate password reset for member user by generating reset token
   * associated with email in todo_list_members table.
   *
   * This API operation initiates the password reset process for member users by
   * generating a time-limited reset token and bound to the user's email
   * address. The token is stored securely and associated with the user's
   * account in the todo_list_members table.
   *
   * The schema confirms this operation is supported by the 'email' field in the
   * todo_list_members table, which is used to identify the user requesting the
   * password reset. The operation requires a valid, registered email address to
   * prevent abuse.
   *
   * The system implements the security requirements by: using a
   * cryptographically secure random token, binding it to a specific email for
   * 15 minutes, and preventing multiple concurrent reset requests. No password
   * is changed during this operation; it only initiates a reset workflow.
   *
   * After initiating, the user will receive the token via email (handled by an
   * external system not defined in this schema), and will then use the
   * resetToken in a follow-up operation to actually update their password. The
   * operation does not directly modify the password_hash field during reset
   * initiation, maintaining data integrity.
   *
   * The operation supports the business requirement of allowing members to
   * recover access if they forget their password while preventing brute force
   * attacks and email enumeration attacks.
   *
   * @param connection
   * @param body Contains the email address for which a password reset is
   *   requested.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ITodoListMember.IRequestPasswordReset,
  ): Promise<ITodoListMember.IResetInitiated> {
    try {
      return await postauthMemberPasswordResetRequest({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
