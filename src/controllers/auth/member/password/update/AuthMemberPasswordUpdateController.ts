import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putauthMemberPasswordUpdate } from "../../../../../providers/putauthMemberPasswordUpdate";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { ITodoListMember } from "../../../../../api/structures/ITodoListMember";

@Controller("/auth/member/password/update")
export class AuthMemberPasswordUpdateController {
  /**
   * Update member user's password in todo_list_members table after validating
   * current password.
   *
   * This API operation enables member users to change their authentication
   * password. The operation requires the user to provide their current password
   * (which is validated against the password_hash in the todo_list_members
   * table) and a new password.
   *
   * The schema confirms this operation is supported by the 'password_hash'
   * field in the todo_list_members table, which stores the bcrypt-hashed
   * password. The operation uses the existing password_hash for validation and
   * replaces it with a new one when the current password is verified.
   *
   * The system implements the security requirements by: hashing the new
   * password with bcrypt algorithm (cost factor 12), ensuring the new password
   * meets minimum requirements (at least 8 characters), and encrypting all
   * communications with HTTPS/TLS 1.2+.
   *
   * This operation is protected by the member authorization role, meaning only
   * authenticated users can change their password. The update also modifies the
   * 'updated_at' timestamp in the todo_list_members table, which helps track
   * security events and informs session management logic (inactivity timeout).
   *
   * The operation prevents unauthorized password changes by requiring knowledge
   * of the current password, following the principle of least privilege.
   *
   * @param connection
   * @param body Contains current password and new password for updating member
   *   user's credentials.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updatePassword(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: ITodoListMember.IUpdatePassword,
  ): Promise<ITodoListMember> {
    try {
      return await putauthMemberPasswordUpdate({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
