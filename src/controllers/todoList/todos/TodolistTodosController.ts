import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getTodoListTodos } from "../../../providers/getTodoListTodos";
import { postTodoListTodos } from "../../../providers/postTodoListTodos";
import { patchTodoListTodosId } from "../../../providers/patchTodoListTodosId";
import { deleteTodoListTodosId } from "../../../providers/deleteTodoListTodosId";

import { IPageITodoListTodoListTask } from "../../../api/structures/IPageITodoListTodoListTask";
import { ITodoListTodoListTask } from "../../../api/structures/ITodoListTodoListTask";

@Controller("/todoList/todos")
export class TodolistTodosController {
  /**
   * Retrieve all todo tasks.
   *
   * Retrieve a complete list of all todo tasks stored in the system. This
   * operation queries the todo_list_task table from the Prisma schema, which
   * contains only the id, title, and is_completed fields. The system maintains
   * no user authentication, session state, or multi-user context. All tasks are
   * returned in ascending order of creation time (earliest first) as defined by
   * the database storage mechanism.
   *
   * The operation returns all tasks regardless of completion status, as per the
   * requirement that tasks must be displayed in a single unfiltered list. No
   * filtering, searching, sorting, or pagination is implemented, in alignment
   * with the 'minimal viable functionality' principle established in the
   * requirements.
   *
   * This operation is public and requires no authentication, as the Todo List
   * application operates under a single implicit user context with no identity
   * or account system. The response includes only the id, title, and
   * is_completed fields as defined in the schema, with no additional metadata,
   * timestamps, or user identifiers.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(): Promise<IPageITodoListTodoListTask> {
    try {
      return await getTodoListTodos();
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new todo task with the provided text content. This operation
   * inserts a new record into the todo_list_task table from the Prisma schema.
   * The title field must contain at least one non-whitespace character and be
   * truncated to 500 characters if longer, as specified in the schema
   * description. Leading and trailing whitespace is trimmed, and internal
   * whitespace is preserved. The is_completed field is automatically set to
   * false by default, as defined in the schema.
   *
   * The system rejects empty or whitespace-only inputs without creating a task,
   * as per the business requirements. This operation has no authentication
   * requirements since the Todo List application operates under a single
   * implicit user context with no user authentication or session management.
   *
   * The operation returns the newly created task with its generated id, title,
   * and is_completed state. The response includes only the fields defined in
   * the todo_list_task schema - id, title, and is_completed - with no
   * additional metadata, timestamps, or user identifiers.
   *
   * @param connection
   * @param body Request body containing the task title for creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: ITodoListTodoListTask.ICreate,
  ): Promise<ITodoListTodoListTask> {
    try {
      return await postTodoListTodos({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Toggle completion status of a todo task.
   *
   * Toggle the completion status of a specific todo task identified by its
   * unique ID. This operation updates the is_completed field in the
   * todo_list_task table from the Prisma schema. When a task is submitted with
   * is_completed set to false, it is updated to true. When submitted with
   * is_completed set to true, it is updated to false. The operation is
   * idempotent and follows the business rules that specify the status can only
   * be changed between incomplete and complete states.
   *
   * The operation silently ignores requests where the specified ID does not
   * exist in the system, in accordance with the error handling specifications.
   * No user authentication is required since the Todo List application operates
   * under a single implicit user context with no identity verification.
   *
   * The request body must contain the is_completed boolean value representing
   * the target state. The response returns the updated task with its id, title,
   * and updated is_completed status, consistent with the schema definition.
   *
   * @param connection
   * @param id Unique identifier of the target todo task
   * @param body Target completion status to toggle the task to
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch(":id")
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTodoListTask.IUpdate,
  ): Promise<ITodoListTodoListTask> {
    try {
      return await patchTodoListTodosId({
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a todo task identified by its unique ID. This operation
   * removes a record from the todo_list_task table from the Prisma schema. The
   * schema contains no soft delete fields (e.g., deleted_at, is_deleted), so
   * this is a hard delete operation that permanently removes the task data from
   * storage.
   *
   * The operation silently ignores requests where the specified ID does not
   * exist in the system, as required by the error handling specifications. No
   * user authentication is required since the Todo List application operates
   * under a single implicit user context with no identity verification.
   *
   * There is no request body for this operation. The response does not return
   * any data, as deletion is a destructive operation with no confirmation or
   * returned payload required by the requirements.
   *
   * @param connection
   * @param id Unique identifier of the todo task to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteTodoListTodosId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
